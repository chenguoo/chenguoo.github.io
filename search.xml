<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MapStruct(entity优雅的转dto)</title>
      <link href="2020/12/25/mapstruct/"/>
      <url>2020/12/25/mapstruct/</url>
      
        <content type="html"><![CDATA[<p>开发中我们可能使用JPA、通用Mapper或者MyBatis-Plus去查询数据，而这类框架都是返回的实体，实体是和数据库中的表是一一对应的，而作为接口的返回值我们无需把整个实体都暴露给前端，通常会将实体转换成另一个DTO对象来返回，通常有以下转换方式：</p><ul><li>自己写代码手动转换（这种方式代码量多，而且不优雅）</li><li>BeanUtils.copyProperties(entity, dto)，这种方式是通过反射来实现的，一般反射效率相对有点低</li><li>使用ModelMapper框架（这种方式是通过反射来实现的，一般反射效率相对有点低）</li><li>使用MapStruct框架（这种方式是在编译器自动生成转换代码，将原来的手动改为自动，相对于使用反射实现的此种方式效率更好）</li></ul><p>综合比较性能、问题排查、文档、成熟度、扩展性等因素来考虑，MapStruct 是一个不错的选择，实体映射转换各个工具比较 <a href="https://java.libhunt.com/compare-mapstruct-vs-selma">https://java.libhunt.com/compare-mapstruct-vs-selma</a></p><p><img src="https://p1-tt.byteimg.com/origin/pgc-image/8bed760a38814c578aec5fa81ed632fd?from=pc" alt="MapStruct(entity优雅的转dto)"></p><ul><li>MapStruct官网地址： <a href="http://mapstruct.org/%EF%BC%8C">http://mapstruct.org/，</a></li><li>GitHub示例程序：<a href="https://github.com/mapstruct/mapstruct-examples">https://github.com/mapstruct/mapstruct-examples</a></li></ul><h2 id="1-添加依赖-和-配置插件"><a href="#1-添加依赖-和-配置插件" class="headerlink" title="1. 添加依赖 和 配置插件"></a><strong>1. 添加依赖 和 配置插件</strong></h2><p>注意：如果使用了lombok应尽量使用比较高的版本，maven-compiler-plugin 插件也最好使用较高的版本。否则有可能报这个错：</p><p>Error:(12, 5) java: No property named “xxx” exists in source parameter(s). Did you mean “null”?</p><p>maven pom.xml：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">></span></span>1.4.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.projectlombok.version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.projectlombok.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.projectlombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.projectlombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-实体"><a href="#2-实体" class="headerlink" title="2. 实体"></a><strong>2. 实体</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> UserStatusEnum <span class="token punctuation">{</span>   <span class="token function">NORMAL</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"正常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">LOCK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"锁定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>   <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>   <span class="token function">UserStatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> UserStatusEnum userStatusEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> UserInfo userInfo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-DTO"><a href="#3-DTO" class="headerlink" title="3. DTO"></a><strong>3. DTO</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String realName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String createTimeFormat<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-实体与DTO属性映射配置"><a href="#4-实体与DTO属性映射配置" class="headerlink" title="4. 实体与DTO属性映射配置"></a><strong>4. 实体与DTO属性映射配置</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel<span class="token operator">=</span><span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserConverter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"realName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"status"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(user.getUserStatusEnum().getCode())"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"createTimeFormat"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"userInfo.address"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    UserDTO <span class="token function">entity2dto</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@Mapper 只有在接口加上这个注解，MapStruct 才会去实现该接口,@Mapper 里有个 componentModel 属性，主要是指定实现类的类型，一般用到两个:</li><li>default：默认，可以通过 Mappers.getMapper(Class) 方式获取实例对象。</li><li>spring：在接口的实现类上自动添加注解 @Component，可通过 @Autowired 方式注入。</li><li>@Mappings：配置多个@Mapping</li><li>@Mapping：属性映射，若源对象属性与目标对象名字一致，会自动映射对应属性</li><li>source：源属性</li><li>target：目标属性</li><li>dateFormat：String 到 Date 日期之间相互转换，通过 SimpleDateFormat，该值为 SimpleDateFormat的日期格式</li><li>expression：使用Java方法来格式化值</li><li>ignore: 忽略这个字段</li></ul><p>@Mapper可以单独放在一个类中配置，也可以在JPA或者MyBatis中的Mapper类中来配置。</p><p>手工编译（mvn compile）或者启动 IDE 的时候， 会自动在 target/classes 下生成对应的实现类。</p><p><img src="https://p6-tt.byteimg.com/origin/pgc-image/2e81ec6f2dd641ac83215083b7b3dd0a?from=pc" alt="MapStruct(entity优雅的转dto)"></p><h2 id="5-Test"><a href="#5-Test" class="headerlink" title="5. Test"></a><strong>5. Test</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringbootMapstructApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserConverter userConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMapStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserInfo userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"上海市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token string">"此人非常懒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"周某人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserStatusEnum</span><span class="token punctuation">(</span>UserStatusEnum<span class="token punctuation">.</span>LOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDTO userDTO <span class="token operator">=</span> userConverter<span class="token punctuation">.</span><span class="token function">entity2dto</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-tt.byteimg.com/origin/pgc-image/33535db0ceb34ff4be0d128c89b33ce9?from=pc" alt="MapStruct(entity优雅的转dto)"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源利器：自动生成随机 mock 数据测试对象</title>
      <link href="2020/12/25/data-factory/"/>
      <url>2020/12/25/data-factory/</url>
      
        <content type="html"><![CDATA[<h2 id="测试的痛点"><a href="#测试的痛点" class="headerlink" title="测试的痛点"></a><strong>测试的痛点</strong></h2><p>大家好，我是老马。</p><p>每一位开发者大部分工作都是写代码、测试代码、修BUG。</p><p>我们有很多测试代码，总是花费大量的实践去构建一个对象。</p><p>于是就在想，能不能自动填充一个对象呢？</p><p>于是去 github 查了一下，找到了一个测试神器 data-factory。</p><blockquote><p><a href="https://github.com/houbb/data-factory/">https://github.com/houbb/data-factory/</a></p></blockquote><h2 id="data-factory"><a href="#data-factory" class="headerlink" title="data-factory"></a><strong>data-factory</strong></h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h3><p>data-factory 项目用于根据对象，随机自动生成初始化信息。便于测试。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><ul><li>8 大基本类型的支持</li><li>数组、对象、枚举、Map、链表、Set 等支持</li><li>String、BigDecimal、BigInteger、Currency 等常见类型的支持</li><li>Date、LocalDate、LocalDateTime、LocalTime、Year 等常见日期类型支持</li><li>支持 Regex 正则表达式</li><li>@DataFactory 注解支持灵活配置</li></ul><p><strong>快速入门</strong></p><p>引入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.houbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>data-factory-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过 DataUtil.build(class) 就可以生成对应类的随机值。</p><p>比如 DataUtil.build(String.class);，就可以生成随机的字符串：</p><pre><code>0s5Z8foS1</code></pre><p>老马发现，基本支持所有常见的类型，我们指定对应的 class 即可，这点还是挺方便的。</p><p>不过我一般都是使用对象，那可以自动填充一个对象吗？</p><h2 id="对象-bean-填充"><a href="#对象-bean-填充" class="headerlink" title="对象 bean 填充"></a><strong>对象 bean 填充</strong></h2><p>当然，最常用的还是初始化一个 java 对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> stringList<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//S/F 的枚举</span>    <span class="token keyword">private</span> StatusEnum statusEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Getter &amp; Setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建方法 User user = DataUtil.build(User.class);</p><p>构建对象如下：</p><pre><code>User{name='wZ8CJZtK', age=-564106861, birthday=Wed Feb 27 22:14:34 CST 2019, stringList=[Du4iJkQj], statusEnum=S, map={yA5yDqM=Kdzi}}</code></pre><p>内容每次都随机，便于基本的测试数据填充。</p><h3 id="DataFactory-注解"><a href="#DataFactory-注解" class="headerlink" title="@DataFactory 注解"></a><strong><code>@DataFactory</code> 注解</strong></h3><p>当然，有时候我们希望生成的数据符合一定的规则，这个时候可以通过 @DataFactory 注解去进行限制。</p><h2 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a><strong>注解属性</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数据生成注解 * @author binbin.hou * @date 2019/3/9 * @since 0.0.2 */</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DataFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 是否忽略此字段     *     * @return 默认不忽略     */</span>    <span class="token keyword">boolean</span> <span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数字整数部分最大值。     * 只作用于数字类型的字段     *     * @return 返回最大值     */</span>    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数字整数部分最小值。     * 只作用于数字类型的字段     *     * @return 返回最小值     */</span>    <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 精度。     * 作用于Float、Double、BigDecimal 小数部分长度     *     * @return 返回精度     */</span>    <span class="token keyword">int</span> <span class="token function">precision</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最大长度。只作用于String类型的字段     *     * @return 返回最大长度     */</span>    <span class="token keyword">int</span> <span class="token function">maxLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最小长度。只作用于String类型的字段     *     * @return 返回最小长度     */</span>    <span class="token keyword">int</span> <span class="token function">minLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 指定当前字段的类实现策略     * @return 实现类     * @since 0.0.6     */</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">IData</span><span class="token operator">></span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> IData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 正则表达式     * 1. 当前版本为了简单方便，如果 regex 存在，则直接忽略长度，精度等其他注解配置。     * 2. 建议直接使用在 String 类型     * 3. 如果使用其他类型，则必须保证提供了对应的 String 构造器。如{@link Long#Long(String)}     * 4. 基本类型会直接使用对应的包装类型。     * @since 0.0.3     * @return 表达式信息     */</span>    String <span class="token function">regex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a><strong>String 类</strong></h2><ul><li>定义对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 字符串类注解测试 * @author binbin.hou * @date 2019/3/9 * @since 0.0.2 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAnnotationString</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 指定最小长度，最大长度     */</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>minLen <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> maxLen <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 忽略生成当前字段     */</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String hobby<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Getter &amp; Setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**** Method: build(clazz)*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringAnnotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserAnnotationString userAnnotationString <span class="token operator">=</span> DataUtil<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>UserAnnotationString<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assertions<span class="token punctuation">.</span><span class="token function">assertNull</span><span class="token punctuation">(</span>userAnnotationString<span class="token punctuation">.</span><span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assertions<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>userAnnotationString<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assertions<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>userAnnotationString<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Number-类"><a href="#Number-类" class="headerlink" title="Number 类"></a><strong>Number 类</strong></h2><ul><li>对象定义</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数字类注解测试 * @author binbin.hou * @date 2019/3/9 * @since 0.0.2 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAnnotationNumber</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Byte aByte<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Short aShort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer integer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long aLong<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Double aDouble<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Float aFloat<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BigDecimal bigDecimal<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BigInteger bigInteger<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Getter &amp; Setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试代码</li></ul><p>通过 DataUtil.build(UserAnnotationNumber.class) 生成的对象如下：</p><pre><code>UserAnnotationNumber{aByte=10, aShort=17, integer=19, aLong=11, aDouble=19.888, aFloat=10.067, bigDecimal=18.035, bigInteger=13}</code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><strong>正则表达式</strong></h2><p>正则表达式作为一大神器，自然是不能落下。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><p>对象的定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 正则表达式测试对象 * @author binbin.hou * @date 2019/3/12 * @since 0.0.3 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>regex <span class="token operator">=</span> <span class="token string">"[0-3]([a-c]|[e-g]{1,2})"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>regex <span class="token operator">=</span> <span class="token string">"[0-9]{1,2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>regex <span class="token operator">=</span> <span class="token string">"[0-9]{1,2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Getter &amp; Setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a><strong>效果</strong></h2><p>生成效果如下：</p><pre><code>RegexBean{name='2c', age=61, amount=39}</code></pre><h2 id="自定义-Data-生成策略"><a href="#自定义-Data-生成策略" class="headerlink" title="自定义 Data 生成策略"></a><strong>自定义 Data 生成策略</strong></h2><p>当然，所有的内置策略只能满足最常见的需求。</p><p>但是无法满足各种特殊的定制化策略，幸运的是我们可以自定义自己的数据填充策略。</p><h2 id="自定义生成策略"><a href="#自定义生成策略" class="headerlink" title="自定义生成策略"></a><strong>自定义生成策略</strong></h2><p>这里我们实现一个最简单的生成策略，如果是字符串，固定为 123。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStringData</span> <span class="token keyword">implements</span> <span class="token class-name">IData</span><span class="token operator">&lt;</span>String<span class="token operator">></span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">build</span><span class="token punctuation">(</span>IContext context<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>String<span class="token operator">></span> stringClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h2><p>我们在 @DataFactory 注解中指定自己的策略。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAnnotationData</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DataFactory</span><span class="token punctuation">(</span>data <span class="token operator">=</span> MyStringData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样生成的就是我们自己的数据生成策略。</p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a><strong>不足之处</strong></h2><p>当然，老马觉得这些特性还是不太方便。</p><p>希望作者可以实现支持全局配置之类的特性，这样会更加方便的。</p><p>各位小伙伴也可以体验一下，让自己早点下班，享受属于自己的时光。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p>今天我们和大家一起感受了数据填充工具的便利性，大家工作中有需要就可以用起来。</p><p>为了便于大家学习，所有源码均已开源：</p><p>对象填充：<a href="https://github.com/houbb/data-factory">https://github.com/houbb/data-factory</a></p><p>性能压测：<a href="https://github.com/houbb/junitperf">https://github.com/houbb/junitperf</a></p><p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mock </tag>
            
            <tag> data </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-agent</title>
      <link href="2020/12/25/java-agent/"/>
      <url>2020/12/25/java-agent/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>java agent是独立于应用程序外的代理程序，可以在应用程序启动前或运行中，修改类字节码信息，改变类的行为。这里对应用程序启动前和运行中的agent使用分别介绍。</p><h2 id="二、应用程序启动前的agent使用"><a href="#二、应用程序启动前的agent使用" class="headerlink" title="二、应用程序启动前的agent使用"></a>二、应用程序启动前的agent使用</h2><p>应用程序启动前agent使用，是通过在应用程序启动时添加-javaagent参数(可多个-javaagent参数)实现的。</p><h3 id="2-1-javaagent参数格式"><a href="#2-1-javaagent参数格式" class="headerlink" title="2.1 javaagent参数格式"></a>2.1 javaagent参数格式</h3><p>javaagent参数使用格式如下：</p><p>java -javaagent:/xx/agent.jar[=参数] -jar xx.jar</p><h3 id="2-2-开发步骤"><a href="#2-2-开发步骤" class="headerlink" title="2.2 开发步骤"></a>2.2 开发步骤</h3><p>应用程序启动前agent开发，包含agent程序开发、MENIFEST.MF配置文件定义、maven中maven-jar-plugin插件修改、打jar包、主程序调用，具体开发步骤如下：</p><p>定义agent程序，需包含方法名为premain的静态方法，同时实现ClassFileTransformer接口对特定类字节码修改(结合javassist工具)；</p><p>定义MENIFEST.MF配置文件，位于resources/META-INF目录下，内容类似：</p><p>Manifest-Version: 1.0.1</p><p>Premain-Class: com.dragon.study.spring_boot_pre_agent.PreAgentMain</p><p>Can-Redefine-Classes: true</p><p>其中Premain-Class为前面定义的agent类，且配置文件最要空一行。</p><p>修改mava的pom.xml中的插件配置，类似于：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Premain-Class</span><span class="token punctuation">></span></span>com.dragon.study.spring_boot_pre_agent.PreAgentMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Premain-Class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将前面定义的agent程序打成jar包；</p><p>在目标主程序上，添加-javaagent参数及前面的agent的jar包，再运行目标主程序，类似于：</p><pre class="line-numbers language-shell"><code class="language-shell">java -javaagent:/xx/agent.jar=agentArgs -cp /xx.jar xx.Main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3 示例"></a>2.3 示例</h3><p>这是以spring_boot_pre_agent项目创建agent的jar包，以spring_boot_main项目中的PreAgentTargetMain为目标类为例。</p><h4 id="2-3-1-agent项目spring-boot-pre-agent"><a href="#2-3-1-agent项目spring-boot-pre-agent" class="headerlink" title="2.3.1 agent项目spring_boot_pre_agent"></a>2.3.1 agent项目spring_boot_pre_agent</h4><h5 id="2-3-1-1-agent项目中的maven依赖"><a href="#2-3-1-1-agent项目中的maven依赖" class="headerlink" title="2.3.1.1 agent项目中的maven依赖"></a>2.3.1.1 agent项目中的maven依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dragon.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring_boot_pre_agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring_boot_pre_agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.26.0-GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Premain-Class</span><span class="token punctuation">></span></span>com.dragon.study.spring_boot_pre_agent.PreAgentMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Premain-Class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-1-2-agent项目中的agent相关类"><a href="#2-3-1-2-agent项目中的agent相关类" class="headerlink" title="2.3.1.2 agent项目中的agent相关类"></a>2.3.1.2 agent项目中的agent相关类</h5><p>这里agent相关类包含自定义字节码编辑类ConfigTransformer.java和agent主类PreAgentMain.java,如下： ConfigTransformer.java类如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_pre_agent<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtMethod<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>ClassFileTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>IllegalClassFormatException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ProtectionDomain<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改类的字节码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> ClassPool classPool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classBeingRedefined<span class="token punctuation">,</span> ProtectionDomain protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalClassFormatException <span class="token punctuation">{</span>String target <span class="token operator">=</span> <span class="token string">"com.dragon.study.spring_boot_main.StaticConfig"</span><span class="token punctuation">;</span>className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>CtClass ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>CtMethod ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定方法添加一行自定义输出</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"System.out.println(\"pre inject, configName:\"+configName);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回修改后的字节码</span><span class="token keyword">return</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回原类字节码</span><span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>PreAgentMain类如下：<span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_pre_agent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>Instrumentation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreAgentMain</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//主程序运行前执行自定义操作</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span>String agentArgs<span class="token punctuation">,</span> Instrumentation inst<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里示例打印传入参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"agentArgs:"</span><span class="token operator">+</span>agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改指定类行为</span>inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfigTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-1-3-agent项目中的MENIFEST-MF配置文件"><a href="#2-3-1-3-agent项目中的MENIFEST-MF配置文件" class="headerlink" title="2.3.1.3 agent项目中的MENIFEST.MF配置文件"></a>2.3.1.3 agent项目中的MENIFEST.MF配置文件</h5><p>MENIFEST.MF配置文件位于resources/META-INF目录下，内容为：</p><pre class="line-numbers language-text"><code class="language-text">Manifest-Version: 1.0.1Premain-Class: com.dragon.study.spring_boot_pre_agent.PreAgentMainCan-Redefine-Classes: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-3-1-4-agent项目打为jar包"><a href="#2-3-1-4-agent项目打为jar包" class="headerlink" title="2.3.1.4 agent项目打为jar包"></a>2.3.1.4 agent项目打为jar包</h5><p>这里通过maven打jar包为：spring_boot_pre_agent-0.0.1-SNAPSHOT.jar</p><h4 id="2-3-2-agent目标项目spring-boot-main"><a href="#2-3-2-agent目标项目spring-boot-main" class="headerlink" title="2.3.2 agent目标项目spring_boot_main"></a>2.3.2 agent目标项目spring_boot_main</h4><p>spring_boot_main示例包含目标相关类，以及最终添加agent启动。</p><h5 id="2-3-2-1-目标相关类"><a href="#2-3-2-1-目标相关类" class="headerlink" title="2.3.2.1 目标相关类"></a>2.3.2.1 目标相关类</h5><p>目标相关类包含静态配置类StaticConfig.java和目标类PreAgentTargetMain.java如下： StaticConfig.java：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_main<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticConfig</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//自定义静态属性</span><span class="token keyword">public</span> <span class="token keyword">static</span> String configName<span class="token operator">=</span><span class="token string">"apple"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> configName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>PreAgentTargetMain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_main<span class="token punctuation">.</span>agent<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_main<span class="token punctuation">.</span>StaticConfig<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreAgentTargetMain</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用指定方法</span>StaticConfig<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-3-测试"><a href="#2-3-3-测试" class="headerlink" title="2.3.3 测试"></a>2.3.3 测试</h4><p>应用程序启动前使用agent，是通过启动时添加-javaagent参数实现的。测试调用如下：</p><pre class="line-numbers language-shell"><code class="language-shell">java -javaagent:/xx/spring_boot_pre_agent-0.0.1-SNAPSHOT.jar=agentArgs -cp /xx/spring_boot_main-0.0.1-SNAPSHOT.jar com.dragon.study.spring_boot_main.agent.PreAgentTargetMain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">agentArgs</span><span class="token punctuation">:</span><span class="token attr-value">agentArgs</span>main<span class="token attr-name">pre</span> <span class="token attr-value">inject, configName:apple</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总结分析，借助应用程序启动前agent的使用，在PreAgentTargetMain启动前改变了其行为。</p><p>三、应用程序运行中的agent使用</p><p>应用程序运行中的agent使用，是通过第三方程序，借助VirtualMachine将自定义agent添加到目标程序(通过进程号pid)上。</p><h3 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h3><p>应用程序运行中的agent开发和运行前类似，只是启动方式不同，包含agent程序开发、MENIFEST.MF配置文件定义、maven中maven-jar-plugin插件修改、打jar包、agent使用的目标程序、第三方启动程序，具体开发步骤如下：</p><p>定义agent程序，需包含方法名为agentmain的静态方法，同时实现ClassFileTransformer接口对特定类字节码修改(结合javassist工具)；</p><p>定义MENIFEST.MF配置文件，位于resources/META-INF目录下，内容类似：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">Manifest-Version</span><span class="token punctuation">:</span> <span class="token attr-value">1.0.1</span><span class="token attr-name">Agent-Class</span><span class="token punctuation">:</span> <span class="token attr-value">com.dragon.study.spring_boot_post_agent.PostAgentMain</span><span class="token attr-name">Can-Retransform-Classes</span><span class="token punctuation">:</span> <span class="token attr-value">true</span><span class="token attr-name">Can-Redefine-Classes</span><span class="token punctuation">:</span> <span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中Agent-Class为前面定义的agent类，且配置文件最要空一行。</p><p>修改mava的pom.xml中的插件配置，类似于：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">></span></span>com.dragon.study.spring_boot_post_agent.PostAgentMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Redefine-Classes</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Redefine-Classes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Retransform-Classes</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Retransform-Classes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将前面定义的agent程序打成jar包；</p><p>通过第三方程序将agent程序添加到目标程序上，类似：</p><p>//获取指定项目运行的pid</p><p>String targetPid = “xx”</p><p>//运行期，对指定pid程序添加agent,动态改变程序行为</p><p>VirtualMachine vm = VirtualMachine.attach(targetPid);</p><p>//添加指定agent的jar包</p><p>vm.loadAgent(“/xx/agent.jar”);</p><p>vm.detach();</p><h3 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h3><p>这是以spring_boot_post_agent项目创建agent的jar包，以spring_boot_main项目为目标项目，以PostAgentTargetMain.java为第三方添加程序为例。</p><h4 id="3-2-1-agent项目spring-boot-post-agent"><a href="#3-2-1-agent项目spring-boot-post-agent" class="headerlink" title="3.2.1 agent项目spring_boot_post_agent"></a>3.2.1 agent项目spring_boot_post_agent</h4><h5 id="3-2-1-1-agent项目中的maven依赖"><a href="#3-2-1-1-agent项目中的maven依赖" class="headerlink" title="3.2.1.1 agent项目中的maven依赖"></a>3.2.1.1 agent项目中的maven依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dragon.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring_boot_post_agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring_boot_post_agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.26.0-GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addClasspath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Agent-Class</span><span class="token punctuation">></span></span>com.dragon.study.spring_boot_post_agent.PostAgentMain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Agent-Class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Redefine-Classes</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Redefine-Classes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Can-Retransform-Classes</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Can-Retransform-Classes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.2.1.2 agent项目中的agent相关类</p><p>这里agent相关类包含自定义字节码编辑类ConfigTransformer.java和agent主类PreAgentMain.java,如下： ConfigTransformer.java类如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_post_agent<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtMethod<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>Loader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>ClassFileTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>IllegalClassFormatException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ProtectionDomain<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> ClassPool classPool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classBeingRedefined<span class="token punctuation">,</span> ProtectionDomain protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalClassFormatException <span class="token punctuation">{</span>String target <span class="token operator">=</span> <span class="token string">"com.dragon.study.spring_boot_main.StaticConfig"</span><span class="token punctuation">;</span>className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>CtClass ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>CtMethod ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定方法添加一行自定义输出</span>ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"System.out.println(\"post inject, configName:\"+configName);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回修改后的字节码</span><span class="token keyword">return</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回原类字节码</span><span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>PostAgentMain类如下：<span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_post_agent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>Instrumentation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>UnmodifiableClassException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostAgentMain</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span>String agentArgs<span class="token punctuation">,</span> Instrumentation inst<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里示例打印传入参数</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"agentArgs:"</span> <span class="token operator">+</span> agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印加载的所有类</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> clazzArr <span class="token operator">=</span> inst<span class="token punctuation">.</span><span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Stream.of(clazzArr).forEach(System.out::println);</span><span class="token comment" spellcheck="true">//打印目标项目中指定字段的内存值</span>Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>clazzArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"StaticConfig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"configName:"</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"configName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改目标项目中指定字段的内存值</span>Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>clazzArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"StaticConfig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"configName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行期修改指定类行为</span>Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>clazzArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"StaticConfig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfigTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inst<span class="token punctuation">.</span><span class="token function">retransformClasses</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnmodifiableClassException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-1-3-agent项目中的MENIFEST-MF配置文件"><a href="#3-2-1-3-agent项目中的MENIFEST-MF配置文件" class="headerlink" title="3.2.1.3 agent项目中的MENIFEST.MF配置文件"></a>3.2.1.3 agent项目中的MENIFEST.MF配置文件</h5><p>MENIFEST.MF配置文件位于resources/META-INF目录下，内容为：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">Manifest-Version</span><span class="token punctuation">:</span> <span class="token attr-value">1.0.1</span><span class="token attr-name">Agent-Class</span><span class="token punctuation">:</span> <span class="token attr-value">com.dragon.study.spring_boot_post_agent.PostAgentMain</span><span class="token attr-name">Can-Retransform-Classes</span><span class="token punctuation">:</span> <span class="token attr-value">true</span><span class="token attr-name">Can-Redefine-Classes</span><span class="token punctuation">:</span> <span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-1-4-agent项目打为jar包"><a href="#3-2-1-4-agent项目打为jar包" class="headerlink" title="3.2.1.4 agent项目打为jar包"></a>3.2.1.4 agent项目打为jar包</h5><p>这里通过maven打jar包为：spring_boot_post_agent-0.0.1-SNAPSHOT.jar</p><h4 id="3-2-2-agent目标项目spring-boot-main"><a href="#3-2-2-agent目标项目spring-boot-main" class="headerlink" title="3.2.2 agent目标项目spring_boot_main"></a>3.2.2 agent目标项目spring_boot_main</h4><p>spring_boot_main为完整常规项目。</p><h5 id="3-2-2-1-添加maven依赖"><a href="#3-2-2-1-添加maven依赖" class="headerlink" title="3.2.2.1 添加maven依赖"></a>3.2.2.1 添加maven依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dragon.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring_boot_main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring_boot_main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.26.0-GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.2.2.2 application.yaml配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10013</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-2-3-关键类"><a href="#3-2-2-3-关键类" class="headerlink" title="3.2.2.3 关键类"></a>3.2.2.3 关键类</h5><p>目标相关类包含静态配置类StaticConfig.java和启动类： StaticConfig.java：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_main<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticConfig</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//自定义静态属性</span><span class="token keyword">public</span> <span class="token keyword">static</span> String configName<span class="token operator">=</span><span class="token string">"apple"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> configName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类SpringBootMainApplication.java:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_main<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootMainApplication</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主动加载静态类</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.dragon.study.spring_boot_main.StaticConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-第三方添加类"><a href="#3-3-3-第三方添加类" class="headerlink" title="3.3.3 第三方添加类"></a>3.3.3 第三方添加类</h4><p>第三方添加类是通过VirtualMachine将agent和目标项目关联起来，示例PostAgentTargetMain如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dragon<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring_boot_main<span class="token punctuation">.</span>agent<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span>VirtualMachine<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span>VirtualMachineDescriptor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostAgentTargetMain</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>VirtualMachineDescriptor<span class="token operator">></span> vmList <span class="token operator">=</span> VirtualMachine<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取指定项目运行的pid</span>String targetPid <span class="token operator">=</span> vmList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"com.dragon.study.spring_boot_main.SpringBootMainApplication"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行期，对指定pid程序添加agent,动态改变程序行为</span>VirtualMachine vm <span class="token operator">=</span> VirtualMachine<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>targetPid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加指定agent的jar包</span>vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span><span class="token string">"/xx/spring_boot_post_agent-0.0.1-SNAPSHOT.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vm<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4-测试"><a href="#3-3-4-测试" class="headerlink" title="3.3.4 测试"></a>3.3.4 测试</h4><p>启动spring_boot_main项目，运行第三方添加类PostAgentTargetMain。</p><pre class="line-numbers language-shell"><code class="language-shell">java -javaagent:/xx/spring_boot_pre_agent-0.0.1-SNAPSHOT.jar=agentArgs -cp /xx/spring_boot_main-0.0.1-SNAPSHOT.jar com.dragon.study.spring_boot_main.agent.PreAgentTargetMain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>spring_boot_main输出：</p><p>agentArgs:null</p><p>configName:apple</p><p>再次通过http查看：</p><p>GET <a href="http://localhost:10013/hello/sayHello">http://localhost:10013/hello/sayHello</a></p><p>Accept: application/json</p><p>http结果输出：</p><p>hello banana</p><p>同时spring_boot_main输出：</p><p>post inject, configName:banana</p><p>分析总结： 分析前面测试结果，可以发现，借助运行期agent的使用，实现了动态获取、修改、新增运行期StaticConfig.java(spring_boot_main项目）类的值和行为。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的加密算法</title>
      <link href="2020/12/17/encryption-algorithm/"/>
      <url>2020/12/17/encryption-algorithm/</url>
      
        <content type="html"><![CDATA[<p>加密算法我们整体可以分为：可逆加密和不可逆加密，可逆加密又可以分为：对称加密和非对称加密。</p><h2 id="一、不可逆加密"><a href="#一、不可逆加密" class="headerlink" title="一、不可逆加密"></a>一、不可逆加密</h2><p>常见的不可逆加密算法有<code>MD5</code>，<code>HMAC</code>，<code>SHA1</code>、<code>SHA-224</code>、<code>SHA-256</code>、<code>SHA-384</code>，和<code>SHA-512</code>，其中<code>SHA-224</code>、<code>SHA-256</code>、<code>SHA-384</code>，和<code>SHA-512</code>我们可以统称为<code>SHA2</code>加密算法，<code>SHA</code>加密算法的安全性要比<code>MD5</code>更高，而<code>SHA2</code>加密算法比<code>SHA1</code>的要高。其中<code>SHA</code>后面的数字表示的是加密后的字符串长度，<code>SHA1</code>默认会产生一个<code>160</code>位的信息摘要。</p><p>不可逆加密算法最大的特点就是密钥，但是<code>HMAC</code>是需要密钥的【手动狗头】。</p><p>由于这些加密都是不可逆的，因此比较常用的场景就是用户密码加密，其验证过程就是通过比较两个加密后的字符串是否一样来确认身份的。网上也有很多自称是可以破解<code>MD5</code>密码的网站，其原理也是一样，就是有一个巨大的资源库，存放了许多字符串及对应的<code>MD5</code>加密后的字符串，通过你输入的<code>MD5</code>加密串来进行比较，如果过你的密码复杂度比较低，还是有很大机率验证出来的。</p><h3 id="1-1-MD5"><a href="#1-1-MD5" class="headerlink" title="1.1 MD5"></a>1.1 MD5</h3><blockquote><p><strong>MD5信息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p></blockquote><p><code>MD5</code>算法有以下特点：</p><p>1、压缩性：无论数据长度是多少，计算出来的<code>MD5</code>值长度相同</p><p>2、容易计算性：由原数据容易计算出<code>MD5</code>值</p><p>3、抗修改性：即便修改一个字节，计算出来的<code>MD5</code>值也会巨大差异</p><p>4、抗碰撞性：知道数据和<code>MD5</code>值，很小概率找到相同<code>MD5</code>值相同的原数据。</p><pre class="line-numbers language-java"><code class="language-java"> 1public <span class="token keyword">static</span> String <span class="token function">md5</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">2</span>    MessageDigest messageDigest <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token number">3</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token number">4</span>        messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">6</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">7</span>    <span class="token punctuation">}</span> <span class="token number">8</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">9</span>    <span class="token keyword">return</span> Hex<span class="token punctuation">.</span><span class="token function">encodeHexString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-SHA系列"><a href="#1-2-SHA系列" class="headerlink" title="1.2 SHA系列"></a>1.2 SHA系列</h3><blockquote><p><strong>安全散列算法</strong>（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的机率很高。</p><p>2005年8月17日的CRYPTO会议尾声中王小云、姚期智、姚储枫再度发表更有效率的SHA-1攻击法，能在2的63次方个计算复杂度内找到碰撞。</p></blockquote><p>也就是说<code>SHA-1</code>加密算法有碰撞的可能性，虽然很小。</p><pre class="line-numbers language-java"><code class="language-java"> 1public <span class="token keyword">static</span> String <span class="token function">sha256</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">2</span>    MessageDigest messageDigest <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token number">3</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token number">4</span>        messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA-256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">6</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">7</span>    <span class="token punctuation">}</span> <span class="token number">8</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">9</span>    <span class="token keyword">return</span> Hex<span class="token punctuation">.</span><span class="token function">encodeHexString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-HMAC系列"><a href="#1-3-HMAC系列" class="headerlink" title="1.3 HMAC系列"></a>1.3 HMAC系列</h3><blockquote><p>HMAC是密钥相关的哈希运算消息认证码（Hash-based Message Authentication  Code）的缩写，由H.Krawezyk，M.Bellare，R.Canetti于1996年提出的一种基于Hash函数和密钥进行消息认证的方法，并于1997年作为RFC2104被公布，并在IPSec和其他网络协议（如SSL）中得以广泛应用，现在已经成为事实上的Internet安全标准。它可以与任何迭代散列函数捆绑使用。</p><p>HMAC算法更像是一种加密算法，它引入了密钥，其安全性已经不完全依赖于所使用的Hash算法</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> 1public <span class="token keyword">static</span> String <span class="token function">hmacSha256</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> SecretKeySpec sk<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">2</span>    Mac mac <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token number">3</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token number">4</span>        mac <span class="token operator">=</span> Mac<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"HmacSHA256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">6</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">7</span>    <span class="token punctuation">}</span> <span class="token number">8</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token number">9</span>        mac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">11</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12</span>    <span class="token punctuation">}</span><span class="token number">13</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rawHmac <span class="token operator">=</span> mac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>rawHmac<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">15</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要使用不可逆加密，推荐使用SHA256、SHA384、SHA512以及HMAC-SHA256、HMAC-SHA384、HMAC-SHA512这几种算法。</p><h2 id="二、对称加密算法"><a href="#二、对称加密算法" class="headerlink" title="二、对称加密算法"></a>二、对称加密算法</h2><p>对称加密算法是应用比较早的算法，在数据加密和解密的时用的都是同一个密钥，这就造成了密钥管理困难的问题。常见的对称加密算法有<code>DES</code>、<code>3DES</code>、<code>AES128</code>、<code>AES192</code>、<code>AES256</code>(默认安装的<code>JDK</code>尚不支持<code>AES256</code>，需要安装对应的<code>jce</code>补丁进行升级<code>jce1.7</code>，<code>jce1.8</code>)。其中<code>AES</code>后面的数字代表的是密钥长度。对称加密算法的安全性相对较低，比较适用的场景就是内网环境中的加解密。</p><h3 id="2-1-DES"><a href="#2-1-DES" class="headerlink" title="2.1 DES"></a>2.1 DES</h3><p><code>DES</code>是对称加密算法领域中的典型算法，其密钥默认长度为<code>56</code>位。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 加密</span> <span class="token number">2</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataSource<span class="token punctuation">,</span> String password<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token number">3</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token number">4</span>         SecureRandom random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span>         DESKeySpec desKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">6</span>         <span class="token comment" spellcheck="true">//创建一个密匙工厂，然后用它把DESKeySpec转换成 </span> <span class="token number">7</span>         SecretKeyFactory secretKeyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">8</span>         SecretKey secretKey <span class="token operator">=</span> secretKeyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>desKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">9</span>         <span class="token comment" spellcheck="true">//Cipher对象实际完成加密操作 </span><span class="token number">10</span>         Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">11</span>         <span class="token comment" spellcheck="true">//用密匙初始化Cipher对象 </span><span class="token number">12</span>         cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">13</span>         <span class="token comment" spellcheck="true">//正式执行加密操作 </span><span class="token number">14</span>         <span class="token keyword">return</span> Base64<span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">15</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">16</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">17</span>     <span class="token punctuation">}</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token number">18</span> <span class="token punctuation">}</span> <span class="token number">19</span>  <span class="token comment" spellcheck="true">// 解密</span><span class="token number">20</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span>String src<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span> <span class="token number">21</span>    <span class="token comment" spellcheck="true">// DES算法要求有一个可信任的随机数源 </span><span class="token number">22</span>    SecureRandom random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">23</span>    <span class="token comment" spellcheck="true">// 创建一个DESKeySpec对象 </span><span class="token number">24</span>    DESKeySpec desKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESKeySpec</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">25</span>    <span class="token comment" spellcheck="true">// 创建一个密匙工厂 </span><span class="token number">26</span>    SecretKeyFactory keyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">27</span>    <span class="token comment" spellcheck="true">// 将DESKeySpec对象转换成SecretKey对象 </span><span class="token number">28</span>    SecretKey secretKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>desKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">29</span>    <span class="token comment" spellcheck="true">// Cipher对象实际完成解密操作 </span><span class="token number">30</span>    Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">31</span>    <span class="token comment" spellcheck="true">// 用密匙初始化Cipher对象 </span><span class="token number">32</span>    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">33</span>    <span class="token comment" spellcheck="true">// 真正开始解密操作 </span><span class="token number">34</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">35</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3DES"><a href="#2-2-3DES" class="headerlink" title="2.2 3DES"></a>2.2 3DES</h3><p><code>3DES</code>（即Triple DES）是<code>DES</code>向<code>AES</code>过渡的加密算法，它使用3条56位的密钥对数据进行三次加密。是<code>DES</code>的一个更安全的变形。它以<code>DES</code>为基本模块，通过组合分组方法设计出分组加密算法。比起最初的<code>DES</code>，<code>3DES</code>更为安全。密钥长度默认为<code>168</code>位，还可以选择<code>128</code>位。</p><pre class="line-numbers language-java"><code class="language-java"> 1public <span class="token keyword">static</span> String <span class="token function">encryptThreeDESECB</span><span class="token punctuation">(</span>String src<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">2</span>    <span class="token keyword">try</span><span class="token punctuation">{</span> <span class="token number">3</span>        DESedeKeySpec dks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESedeKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">4</span>        SecretKeyFactory keyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span>        SecretKey securekey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>dks<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">6</span> <span class="token number">7</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede/ECB/PKCS5Padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> securekey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">9</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token number">11</span>        String ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12</span>        ss <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13</span>        ss <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14</span>        <span class="token keyword">return</span> ss<span class="token punctuation">;</span><span class="token number">15</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">16</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span><span class="token number">18</span>    <span class="token punctuation">}</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token number">20</span>21public <span class="token keyword">static</span> String <span class="token function">decryptThreeDESECB</span><span class="token punctuation">(</span>String src<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">22</span>    <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token number">23</span>        src <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">24</span>        src <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">25</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytesrc <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">26</span>        <span class="token comment" spellcheck="true">// --解密的key</span><span class="token number">27</span>        DESedeKeySpec dks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESedeKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">28</span>        SecretKeyFactory keyFactory <span class="token operator">=</span> SecretKeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">29</span>        SecretKey securekey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>dks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">30</span><span class="token number">31</span>        <span class="token comment" spellcheck="true">// --Chipher对象解密</span><span class="token number">32</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede/ECB/PKCS5Padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">33</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> securekey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">34</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> retByte <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>bytesrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">35</span><span class="token number">36</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>retByte<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">37</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">38</span>        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">39</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span><span class="token number">40</span>    <span class="token punctuation">}</span><span class="token number">41</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-AES"><a href="#2-3-AES" class="headerlink" title="2.3 AES"></a>2.3 AES</h3><p><code>AES</code>高级数据加密标准，能够有效抵御已知的针对<code>DES</code>算法的所有攻击，默认密钥长度为<code>128</code>位，还可以供选择<code>192</code>位，<code>256</code>位。这里顺便提一句这个位指的是bit。</p><pre class="line-numbers language-java"><code class="language-java"> 1private <span class="token keyword">static</span> <span class="token keyword">final</span> String defaultCharset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span> 2private <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_AES <span class="token operator">=</span> <span class="token string">"AES"</span><span class="token punctuation">;</span> 3private <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_MD5 <span class="token operator">=</span> <span class="token string">"MD5"</span><span class="token punctuation">;</span> 4private <span class="token keyword">static</span> MessageDigest md5Digest<span class="token punctuation">;</span> 5static <span class="token punctuation">{</span> <span class="token number">6</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token number">7</span>        md5Digest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_MD5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">8</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">9</span><span class="token number">10</span>    <span class="token punctuation">}</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token number">12</span><span class="token comment" spellcheck="true">/**13  * 加密14  */</span>15public <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span>String data<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">16</span>    <span class="token keyword">return</span> <span class="token function">doAES</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token number">18</span><span class="token comment" spellcheck="true">/**19  * 解密20  */</span>21public <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span>String data<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">22</span>    <span class="token keyword">return</span> <span class="token function">doAES</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token number">24</span><span class="token number">25</span><span class="token number">26</span><span class="token comment" spellcheck="true">/**27  * 加解密28  */</span>29private <span class="token keyword">static</span> String <span class="token function">doAES</span><span class="token punctuation">(</span>String data<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">30</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token number">31</span>        <span class="token keyword">boolean</span> encrypt <span class="token operator">=</span> mode <span class="token operator">==</span> Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">;</span><span class="token number">32</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">;</span><span class="token number">33</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">34</span>            content <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>defaultCharset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">35</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token number">36</span>            content <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">37</span>        <span class="token punctuation">}</span><span class="token number">38</span>        SecretKeySpec keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>md5Digest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>defaultCharset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">39</span>                                                  <span class="token punctuation">,</span> KEY_AES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">40</span>        Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_AES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建密码器</span><span class="token number">41</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化</span><span class="token number">42</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">43</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">44</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encodeBase64</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">45</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token number">46</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> defaultCharset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">47</span>        <span class="token punctuation">}</span><span class="token number">48</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">49</span>    <span class="token punctuation">}</span><span class="token number">50</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token number">51</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐使用对称加密算法有：<code>AES128</code>、<code>AES192</code>、<code>AES256</code>。</p><h2 id="三、非对称加密算法"><a href="#三、非对称加密算法" class="headerlink" title="三、非对称加密算法"></a>三、非对称加密算法</h2><p>非对称加密算法有两个密钥，这两个密钥完全不同但又完全匹配。只有使用匹配的一对公钥和私钥，才能完成对明文的加密和解密过程。常见的非对称加密有<code>RSA</code>、<code>SM2</code>等。</p><h3 id="3-1-RSA"><a href="#3-1-RSA" class="headerlink" title="3.1 RSA"></a>3.1 RSA</h3><p><code>RSA</code>密钥至少为500位长，一般推荐使用1024位。</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token number">1</span><span class="token comment" spellcheck="true">//非对称密钥算法</span>  2public <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_ALGORITHM <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>  <span class="token number">3</span>  <span class="token number">4</span><span class="token comment" spellcheck="true">/**  5  * 密钥长度，DH算法的默认密钥长度是1024  6  * 密钥长度必须是64的倍数，在512到65536位之间  7  */</span>  8private <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEY_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token number">9</span><span class="token comment" spellcheck="true">//公钥</span> 10private <span class="token keyword">static</span> <span class="token keyword">final</span> String PUBLIC_KEY <span class="token operator">=</span> <span class="token string">"RSAPublicKey"</span><span class="token punctuation">;</span> <span class="token number">11</span><span class="token comment" spellcheck="true">//私钥</span> 12private <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"RSAPrivateKey"</span><span class="token punctuation">;</span> <span class="token number">13</span><span class="token comment" spellcheck="true">/** 14  * 初始化密钥对 15  * 16  * @return Map 甲方密钥的Map 17  */</span> 18public <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">initKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token number">19</span>    <span class="token comment" spellcheck="true">//实例化密钥生成器</span> <span class="token number">20</span>    KeyPairGenerator keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">21</span>    <span class="token comment" spellcheck="true">//初始化密钥生成器</span> <span class="token number">22</span>    keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>KEY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">23</span>    <span class="token comment" spellcheck="true">//生成密钥对</span> <span class="token number">24</span>    KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">25</span>    <span class="token comment" spellcheck="true">//甲方公钥</span> <span class="token number">26</span>    RSAPublicKey publicKey <span class="token operator">=</span> <span class="token punctuation">(</span>RSAPublicKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">27</span>    <span class="token comment" spellcheck="true">//甲方私钥</span> <span class="token number">28</span>    RSAPrivateKey privateKey <span class="token operator">=</span> <span class="token punctuation">(</span>RSAPrivateKey<span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">29</span>    <span class="token comment" spellcheck="true">//将密钥存储在map中</span> <span class="token number">30</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">31</span>    keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">32</span>    keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">33</span>    <span class="token keyword">return</span> keyMap<span class="token punctuation">;</span> <span class="token number">34</span><span class="token punctuation">}</span> <span class="token number">35</span><span class="token comment" spellcheck="true">/** 36  * 私钥加密 37  * 38  * @param data 待加密数据 39  * @param key  密钥 40  * @return byte[] 加密数据 41  */</span> 42public <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token number">43</span> <span class="token number">44</span>    <span class="token comment" spellcheck="true">//取得私钥</span> <span class="token number">45</span>    PKCS8EncodedKeySpec pkcs8KeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">46</span>    KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">47</span>    <span class="token comment" spellcheck="true">//生成私钥</span> <span class="token number">48</span>    PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8KeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">49</span>    <span class="token comment" spellcheck="true">//数据加密</span> <span class="token number">50</span>    Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">51</span>    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">52</span>    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">53</span><span class="token punctuation">}</span> <span class="token number">54</span> <span class="token number">55</span><span class="token comment" spellcheck="true">/** 56  * 公钥加密 57  * 58  * @param data 待加密数据 59  * @param key  密钥 60  * @return byte[] 加密数据 61  */</span> 62public <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token number">63</span> <span class="token number">64</span>    <span class="token comment" spellcheck="true">//实例化密钥工厂</span> <span class="token number">65</span>    KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">66</span>    <span class="token comment" spellcheck="true">//初始化公钥</span> <span class="token number">67</span>    <span class="token comment" spellcheck="true">//密钥材料转换</span> <span class="token number">68</span>    X509EncodedKeySpec x509KeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">69</span>    <span class="token comment" spellcheck="true">//产生公钥</span> <span class="token number">70</span>    PublicKey pubKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509KeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">71</span>    <span class="token comment" spellcheck="true">//数据加密</span> <span class="token number">72</span>    Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">73</span>    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">,</span> pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">74</span>    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">75</span><span class="token punctuation">}</span> <span class="token number">76</span> <span class="token number">77</span><span class="token comment" spellcheck="true">/** 78  * 私钥解密 79  * 80  * @param data 待解密数据 81  * @param key  密钥 82  * @return byte[] 解密数据 83  */</span> 84public <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPrivateKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token number">85</span>    <span class="token comment" spellcheck="true">//取得私钥</span> <span class="token number">86</span>    PKCS8EncodedKeySpec pkcs8KeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">87</span>    KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">88</span>    <span class="token comment" spellcheck="true">//生成私钥</span> <span class="token number">89</span>    PrivateKey privateKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>pkcs8KeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">90</span>    <span class="token comment" spellcheck="true">//数据解密</span> <span class="token number">91</span>    Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">92</span>    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">93</span>    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">94</span><span class="token punctuation">}</span> <span class="token number">95</span> <span class="token number">96</span><span class="token comment" spellcheck="true">/** 97  * 公钥解密 98  * 99  * @param data 待解密数据100  * @param key  密钥101  * @return byte[] 解密数据102  */</span>103public <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptByPublicKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token number">104</span><span class="token number">105</span>    <span class="token comment" spellcheck="true">//实例化密钥工厂</span><span class="token number">106</span>    KeyFactory keyFactory <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KEY_ALGORITHM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">107</span>    <span class="token comment" spellcheck="true">//初始化公钥</span><span class="token number">108</span>    <span class="token comment" spellcheck="true">//密钥材料转换</span><span class="token number">109</span>    X509EncodedKeySpec x509KeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">110</span>    <span class="token comment" spellcheck="true">//产生公钥</span><span class="token number">111</span>    PublicKey pubKey <span class="token operator">=</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>x509KeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">112</span>    <span class="token comment" spellcheck="true">//数据解密</span><span class="token number">113</span>    Cipher cipher <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyFactory<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">114</span>    cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Cipher<span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">,</span> pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">115</span>    <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">116</span><span class="token punctuation">}</span><span class="token number">117</span><span class="token number">118</span><span class="token comment" spellcheck="true">/**119  * 取得私钥120  *121  * @param keyMap 密钥map122  * @return byte[] 私钥123  */</span>124public <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">125</span>    Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">126</span>    <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">127</span><span class="token punctuation">}</span><span class="token number">128</span><span class="token number">129</span><span class="token comment" spellcheck="true">/**130  * 取得公钥131  *132  * @param keyMap 密钥map133  * @return byte[] 公钥134  */</span>135public <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> keyMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token number">136</span>    Key key <span class="token operator">=</span> <span class="token punctuation">(</span>Key<span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">137</span>    <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">138</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、加密盐"><a href="#四、加密盐" class="headerlink" title="四、加密盐"></a>四、加密盐</h2><p>加密盐也是比较常听到的一个概念，盐就是一个随机字符串用来和我们的加密串拼接后进行加密。加盐主要是为了提供加密字符串的安全性。假如有一个加盐后的加密串，黑客通过一定手段这个加密串，他拿到的明文，并不是我们加密前的字符串，而是加密前的字符串和盐组合的字符串，这样相对来说又增加了字符串的安全性。</p><p><strong>文中的一些算法来源于网络，可直接复制使用</strong>。</p><p>比较推荐的几个加密算法有：</p><ul><li>不可逆加密：<code>SHA256</code>、<code>SHA384</code>、<code>SHA512</code>以及<code>HMAC-SHA256</code>、<code>HMAC-SHA384</code>、<code>HMAC-SHA512</code></li><li>对称加密算法：<code>AES</code>、<code>3DES</code></li><li>非对称加密算法：<code>RSA</code></li></ul><p>作者：Java旅途<br>链接：<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247504648&amp;idx=3&amp;sn=a99e72e87a42e5226978843ce0b7a576&amp;chksm=eb50563edc27df28328bb731d0e071bcfdd65faab44f157ce37d9fc892eddff73996729f06df&amp;mpshare=1&amp;scene=1&amp;srcid=0814BbUANZahzDOZl3jK5UDR&amp;sharer_sharetime=1597375409640&amp;sharer_shareid=435636c34212982d3b3d0727d8fe020f&amp;key=d8d62429242a2c0edfd0010eaa53d21715fcbf89b88828f9a80b340559914e9e3fb15ca38d0b46478481da5060a9fbcb32ba1455869f177fefcee64c30e2b317c5065658b779911ce257a481f28af17d8377ab432fbf5cbfb45b9802bfb99f33bf792d5386735f5986ca6ca4ce5e5183585010440b30af1041210f0b2a127112&amp;ascene=1&amp;uin=MjY2MTM3NDU=&amp;devicetype=Windows+10+x64&amp;version=6300002f&amp;lang=zh_CN&amp;exportkey=Azn4+oIXr0yOB8MxZd1UYYc=&amp;pass_ticket=1qlYNDiFNFyY7QVygdW20NdHKJNTCiM6FPzTi+BaRWyJmMj/gc3TRTMdW+l04g8s&amp;wx_header=0">https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247504648&amp;idx=3&amp;sn=a99e72e87a42e5226978843ce0b7a576&amp;chksm=eb50563edc27df28328bb731d0e071bcfdd65faab44f157ce37d9fc892eddff73996729f06df&amp;mpshare=1&amp;scene=1&amp;srcid=0814BbUANZahzDOZl3jK5UDR&amp;sharer_sharetime=1597375409640&amp;sharer_shareid=435636c34212982d3b3d0727d8fe020f&amp;key=d8d62429242a2c0edfd0010eaa53d21715fcbf89b88828f9a80b340559914e9e3fb15ca38d0b46478481da5060a9fbcb32ba1455869f177fefcee64c30e2b317c5065658b779911ce257a481f28af17d8377ab432fbf5cbfb45b9802bfb99f33bf792d5386735f5986ca6ca4ce5e5183585010440b30af1041210f0b2a127112&amp;ascene=1&amp;uin=MjY2MTM3NDU%3D&amp;devicetype=Windows+10+x64&amp;version=6300002f&amp;lang=zh_CN&amp;exportkey=Azn4%2BoIXr0yOB8MxZd1UYYc%3D&amp;pass_ticket=1qlYNDiFNFyY7QVygdW20NdHKJNTCiM6FPzTi%2BBaRWyJmMj%2Fgc3TRTMdW%2Bl04g8s&amp;wx_header=0</a><br>来源：微信公众号<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Encryption </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 启动事件和监听器，太强大了</title>
      <link href="2020/12/15/springbootevent/"/>
      <url>2020/12/15/springbootevent/</url>
      
        <content type="html"><![CDATA[<p>大家都知道，在 Spring 框架中事件和监听无处不在，打通了 Spring 框架的任督二脉，事件和监听也是 Spring 框架必学的核心知识之一。</p><p>一般来说，我们很少会使用到应用程序事件，但我们也不要忘了它们的存在，比如说在 Spring 框架内部都使用了各种不同的事件来处理不同的任务。</p><p>毫无疑问，在 Spring Boot 框架中，事件和监听也得到了发扬光大，除了常用的 Spring Framework 事件（例如：ContextRefreshedEvent）之外，Spring Boot 在启动过程中还发送一系列其他的应用程序事件。</p><h2 id="Spring-Boot-启动事件顺序"><a href="#Spring-Boot-启动事件顺序" class="headerlink" title="Spring Boot 启动事件顺序"></a>Spring Boot 启动事件顺序</h2><p><strong>1、ApplicationStartingEvent</strong></p><p>这个事件在 Spring Boot 应用运行开始时，且进行任何处理之前发送（除了监听器和初始化器注册之外）。</p><p><strong>2、ApplicationEnvironmentPreparedEvent</strong></p><p>这个事件在当已知要在上下文中使用 Spring 环境（Environment）时，在 Spring 上下文（context）创建之前发送。</p><p><strong>3、ApplicationContextInitializedEvent</strong></p><p>这个事件在当 Spring 应用上下文（ApplicationContext）准备好了，并且应用初始化器（ApplicationContextInitializers）已经被调用，在 bean 的定义（bean definitions）被加载之前发送。</p><p><strong>4、ApplicationPreparedEvent</strong></p><p>这个事件是在 Spring 上下文（context）刷新之前，且在 bean 的定义（bean definitions）被加载之后发送。</p><p><strong>5、ApplicationStartedEvent</strong></p><p>这个事件是在 Spring 上下文（context）刷新之后，且在 application/ command-line runners 被调用之前发送。</p><p><strong>6、AvailabilityChangeEvent</strong></p><p>这个事件紧随上个事件之后发送，状态：ReadinessState.CORRECT，表示应用已处于活动状态。</p><p><strong>7、ApplicationReadyEvent</strong></p><p>这个事件在任何 application/ command-line runners 调用之后发送。</p><p><strong>8、AvailabilityChangeEvent</strong></p><p>这个事件紧随上个事件之后发送，状态：ReadinessState.ACCEPTING_TRAFFIC，表示应用可以开始准备接收请求了。</p><p><strong>9、ApplicationFailedEvent</strong></p><p>这个事件在应用启动异常时进行发送。</p><hr><p>上面所介绍的这些事件列表仅包括绑定到 SpringApplication 的 SpringApplicationEvents 事件，除了这些事件以外，以下事件也会在 ApplicationPreparedEvent 之后和 ApplicationStartedEvent 之前发送：</p><ul><li><strong>WebServerInitializedEvent</strong>这个 Web 服务器初始化事件在 WebServer 启动之后发送，对应的还有 ServletWebServerInitializedEvent（Servlet Web 服务器初始化事件）、ReactiveWebServerInitializedEvent（响应式 Web 服务器初始化事件）。</li><li><strong>ContextRefreshedEvent</strong>这个上下文刷新事件是在 Spring 应用上下文（ApplicationContext）刷新之后发送。</li></ul><hr><h2 id="自定义启动事件监听器"><a href="#自定义启动事件监听器" class="headerlink" title="自定义启动事件监听器"></a>自定义启动事件监听器</h2><p>既然我们知道了 Spring Boot 在启动过程中的各个事件，那么我们就可以在每个环节来处理一些我们想做的事情，只需要自定义一个监听器来监听某个事件就可以了。</p><p>比如我们想在上面的第 8 步，即应用启动完成可以接收请求了，我们简单输出一个成功标识。</p><p>Spring Boot 基础的构建这里就不介绍了，如果你对 Spring Boot 还不是很熟悉，或者只是会简单的使用，那还是建议你深入学习下吧，推荐这个 Spring Boot 学习仓库，欢迎 Star 关注：</p><blockquote><p><a href="https://github.com/javastacks/spring-boot-best-practice">https://github.com/javastacks/spring-boot-best-practice</a></p></blockquote><h3 id="1-新建监听器"><a href="#1-新建监听器" class="headerlink" title="1. 新建监听器"></a>1. 新建监听器</h3><pre><code>import lombok.extern.slf4j.Slf4j;import org.springframework.boot.availability.AvailabilityChangeEvent;import org.springframework.boot.availability.ReadinessState;import org.springframework.context.ApplicationListener;/** * 来源：Java技术栈 */@Slf4jpublic class JavastackListener implements ApplicationListener&lt;AvailabilityChangeEvent&gt; {    @Override    public void onApplicationEvent(AvailabilityChangeEvent event) {        log.info("监听到事件：" + event);        if (ReadinessState.ACCEPTING_TRAFFIC == event.getState()){            log.info("应用启动完成，可以请求了……");        }    }}</code></pre><p>新建一个自定义监听器，实现了 ApplicationListener 接口，泛型 AvailabilityChangeEvent 表示仅仅监听 AvailabilityChangeEvent 事件。</p><p>因第 8 步的事件和第 6 步的事件同名，我们可以根据事件的状态来区分到底是哪一个环节的事件 。</p><h3 id="2-注册监听器"><a href="#2-注册监听器" class="headerlink" title="2. 注册监听器"></a>2. 注册监听器</h3><p><strong>注册监听器有两种方式：</strong></p><p>1、在资源目录中的 META-INF/spring.factories 文件中自动注册：</p><pre><code>org.springframework.context.ApplicationListener=\cn.javastack.springboot.features.listener.JavastackListener</code></pre><p>2、如果是监听 Spring 应用上下文（ApplicationContext）创建之后的事件，可以直接在监听器上使用 @Component 注解即可，否则需要使用第一种方法的自动注册，因为 ApplicationContext 并未创建，这时的 Bean 是不能被加载的。</p><h3 id="3-应用启动"><a href="#3-应用启动" class="headerlink" title="3. 应用启动"></a>3. 应用启动</h3><p>下面来看下启动日志：</p><p><img src="https://p3-tt.byteimg.com/origin/pgc-image/173441b6373b46d7a82f8c90325b1926?from=pc" alt="Spring Boot 启动事件和监听器，太强大了"></p><p>可以看到同时输出了第 6 步和 8 步的监听日志，但只输出第 8 步的启动完成日志，自定义监听实现成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解了 Spring Boot 启动过程中的各个事件及监听机制，大家可以依葫芦画瓢实现 Spring Boot 启动过程中的各个自定义操作，比如说在启动过程上实现动态注册、移除 Bean 等。</p><p>一般来说，不建议使用事件和监听器来实现比较耗时和繁重的任务，这样会影响应用程序的正常启动，考虑使用 Spring Boot 的 application/ command-line runners 来进行实现。</p><p>本文只是介绍了一下 Spring Boot 启动过程中的事件及如何实现自定义监听器，怎么实现一个业务上的自定义事件和监听器不在本文范围之类，后续栈长再开一篇，关注Java技术栈第一时间推送，不要走开。</p><p>本文实践所有源代码已上传：</p><blockquote><p><a href="https://github.com/javastacks/spring-boot-best-practice">https://github.com/javastacks/spring-boot-best-practice</a></p></blockquote><p>参考资料：</p><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/2.3.5.RELEASE/reference/htmlsingle/#boot-features-application-events-and-listeners">https://docs.spring.io/spring-boot/docs/2.3.5.RELEASE/reference/htmlsingle/#boot-features-application-events-and-listeners</a></p></blockquote><p>最后，觉得有收获，在看、转发一下哦，原创不易，需要鼓励。</p><p>作者：Java技术栈<br>链接：<a href="https://www.toutiao.com/i6906359568658399752/?tt_from=dingtalk&amp;utm_campaign=client_share&amp;timestamp=1608014320&amp;app=news_article&amp;utm_source=dingtalk&amp;utm_medium=toutiao_ios&amp;use_new_style=1&amp;req_id=202012151438400100260790160D018A45&amp;dtshare_count=1&amp;group_id=6906359568658399752">https://www.toutiao.com/i6906359568658399752/?tt_from=dingtalk&amp;utm_campaign=client_share&amp;timestamp=1608014320&amp;app=news_article&amp;utm_source=dingtalk&amp;utm_medium=toutiao_ios&amp;use_new_style=1&amp;req_id=202012151438400100260790160D018A45&amp;dtshare_count=1&amp;group_id=6906359568658399752</a><br>来源：头条<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> event </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot2之优雅处理返回值</title>
      <link href="2020/12/15/springbootgracefullyhandlesthereturnvalue/"/>
      <url>2020/12/15/springbootgracefullyhandlesthereturnvalue/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目组有个老项目要进行前后端分离改造，应前端同学的要求，其后端提供的返回值格式需形如</p><pre><code>{  "status": 0,  "message": "success",  "data": {  }}</code></pre><p>方便前端数据处理。要实现前端同学这个需求，其实也挺简单的，仅需做如下改造，新增一个返回对象，形如</p><pre><code>@Data@AllArgsConstructor@NoArgsConstructor@Builderpublic class Result&lt;T&gt; {    public static final int success = 0;    public static final int fail = 1;    private int status = success;    private String message = "success";    private T data;}</code></pre><p>然后controller改造成如下</p><pre><code>@RestController@RequestMapping("/user")@Slf4jpublic class UserController {  @Autowired  private UserService userService;  @PostMapping(value="/add")  public Result&lt;UserDTO&gt; addUser(@Valid UserDTO userDTO, BindingResult bindingResult){    Result&lt;UserDTO&gt; result = new Result&lt;&gt;();    if (bindingResult.hasErrors()){      return getUserFailResult(bindingResult, result);    }    saveUser(userDTO, result);    return result;  }}</code></pre><p>仅仅需要这么改造就可以满足前端同学的述求。但这边存在一个问题就是，这个项目后端接口的contoller之前都是直接返回业务bean对象，形如下</p><pre><code>@RestController@Api(tags = "用户管理")@Slf4jpublic class UserController {    @Autowired    private UserService userService;    @GetMapping(value="/get/{id}")    @ApiOperation("根据用户ID查找用户")    @ApiImplicitParam(value = "用户id",name = "id",required = true,paramType = "path")    public UserDTO getUserById(@PathVariable("id") Long id){        UserDTO dto = userService.getUserById(id);        log.info("{}",dto);        return dto;    }    }</code></pre><p>如果按上面的思路</p><pre><code>把UserDTO改造成Result&lt;UserDTO&gt;</code></pre><p>虽然可以满足需求，但问题是后端这样的接口有好几十个，按这种改法很明显工作量比较大，更重要的不符合开闭原则–<strong>对扩展开放，对修改关闭</strong>。那有没有优雅一点的处理方式呢？答案是有的，利用<br>@RestControllerAdvice+ResponseBodyAdvice就可以满足我们的需求</p><h2 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h2><h3 id="1、在改造前，先简单介绍一下-RestControllerAdvice和ResponseBodyAdvice"><a href="#1、在改造前，先简单介绍一下-RestControllerAdvice和ResponseBodyAdvice" class="headerlink" title="1、在改造前，先简单介绍一下@RestControllerAdvice和ResponseBodyAdvice"></a>1、在改造前，先简单介绍一下@RestControllerAdvice和ResponseBodyAdvice</h3><blockquote><p>@RestControllerAdvice</p></blockquote><p>@RestControllerAdvice这个注解是spring 4.3版本之后新增的注解。用于定义@ExceptionHandler、@InitBinder、@ModelAttribute，并应用到所有@RequestMapping。利用他可以来做<strong>异常统一处理</strong>。如果使用的spring低于4.3，那可以使用@ControllerAdvice+@ResponseBody。@ControllerAdvice是spring 3.2版本后就提供的注解，其实现的功能和@RestControllerAdvice类似。<br>其详细的参考文档，可以查看链接@RestControllerAdvice文档以及@ControllerAdvice文档</p><blockquote><p>ResponseBodyAdvice</p></blockquote><p>这个是spring4.1版本之后，新增的接口。其作用是<strong>允许在执行@ResponseBody或ResponseEntity控制器方法之后但在使用HttpMessageConverter编写正文之前自定义响应</strong>。可以直接在RequestMappingHandlerAdapter和ExceptionHandlerExceptionResolver中注册实现，也可以在@ControllerAdvice或者@RestControllerAdvice中注解。其详细参考文档可以查看链接ResponseBodyAdvice文档</p><h3 id="2、编写一个通用的响应实体"><a href="#2、编写一个通用的响应实体" class="headerlink" title="2、编写一个通用的响应实体"></a>2、编写一个通用的响应实体</h3><pre><code>@Data@AllArgsConstructor@NoArgsConstructor@Builderpublic class Result&lt;T&gt; {    public static final int success = 0;    public static final int fail = 1;    private int status = success;    private String message = "success";    private T data;}</code></pre><h3 id="3、编写一个类上加上-RestControllerAdvice并实现ResponseBodyAdvice接口。用来统一处理响应值"><a href="#3、编写一个类上加上-RestControllerAdvice并实现ResponseBodyAdvice接口。用来统一处理响应值" class="headerlink" title="3、编写一个类上加上@RestControllerAdvice并实现ResponseBodyAdvice接口。用来统一处理响应值"></a>3、编写一个类上加上@RestControllerAdvice并实现ResponseBodyAdvice接口。用来统一处理响应值</h3><pre><code>@RestControllerAdvice(basePackages = "com.github.lybgeek")@Slf4jpublic class ResponseAdvice implements ResponseBodyAdvice {    @Override    public boolean supports(MethodParameter methodParameter, Class aClass) {        return true;    }    @Override    public Object beforeBodyWrite(Object o, MethodParameter methodParameter, MediaType mediaType, Class aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse) {        if(Objects.isNull(o)){            return Result.builder().message("success").build();        }        if(o instanceof Result){            return o;        }        return Result.builder().message("success").data(o).build();    }    @ExceptionHandler(Exception.class)    @ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR)    public Result&lt;?&gt; exceptionHandler(HttpServletRequest request, Exception e) {        log.error(e.getMessage(), e);        return Result.builder().message(e.getMessage()).status(Result.fail).build();    }    /**     * 针对业务异常统一处理     * @param request     * @param bizException     * @return     */    @ExceptionHandler(BizException.class)    @ResponseStatus(code = HttpStatus.EXPECTATION_FAILED)    public Result&lt;?&gt; bizExceptionHandler(HttpServletRequest request, BizException bizException) {            int errorCode = bizException.getCode();            log.error("catch bizException {}", errorCode);            return Result.builder().message(bizException.getMessage()).status(errorCode).build();    }    /**     * 针对Validate校验异常统一处理     * @param request     * @param methodArgumentNotValidException     * @return     */    @ExceptionHandler(MethodArgumentNotValidException.class)    @ResponseStatus(code = HttpStatus.BAD_REQUEST)    public Result&lt;?&gt; methodArgumentNotValidExceptionExceptionHandler(HttpServletRequest request, MethodArgumentNotValidException methodArgumentNotValidException) {        Result result = new Result();        log.error("catch methodArgumentNotValidException :" + methodArgumentNotValidException.getMessage(), methodArgumentNotValidException);        return ResultUtils.INSTANCE.getFailResult(methodArgumentNotValidException.getBindingResult(),result);    }    /**     * 针对Assert断言异常统一处理     * @param request     * @param illegalArgumentExceptionException     * @return     */    @ExceptionHandler(IllegalArgumentException.class)    @ResponseStatus(code = HttpStatus.EXPECTATION_FAILED)    public Result&lt;?&gt; illegalArgumentExceptionHandler(HttpServletRequest request, IllegalArgumentException illegalArgumentExceptionException) {        log.error("illegalArgumentExceptionException:"+illegalArgumentExceptionException.getMessage(), illegalArgumentExceptionException);        return Result.builder().message(illegalArgumentExceptionException.getMessage()).status(Result.fail).build();    }</code></pre><h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><blockquote><p>1、编写业务DTO</p></blockquote><pre><code>@Data@AllArgsConstructor@NoArgsConstructor@Builder@ApiModelpublic class UserDTO implements Serializable {  @NotNull(message = "编号不能为空",groups = {Update.class, Delete.class})  @ApiModelProperty(value = "编号",name = "id",example = "1")  private Long id;  @NotBlank(message = "用户名不能为空",groups = {Add.class})  @ApiModelProperty(value = "用户名",name = "userName",example = "zhangsan")  private String userName;  @NotBlank(message = "姓名不能为空",groups = {Add.class})  @ApiModelProperty(value = "姓名",name = "realName",example = "张三")  private String realName;  @NotBlank(message = "密码不能为空",groups = {Add.class})  @Size(max=32,min=6,message = "密码长度要在6-32之间",groups = {Add.class})  @ApiModelProperty(value = "密码",name = "password",example = "123456")  private String password;  @NotNull(message = "性别不能为空",groups = {Add.class})  @ApiModelProperty(value = "性别",name = "gender",example = "1")  @EnumValid(target = Gender.class, message = "性别取值必须为0或者1",groups = {Add.class,Update.class})  private Integer gender;  @ApiModelProperty(value = "邮箱",name = "email",example = "zhangsan@qq.com")  @Pattern(regexp = "^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z0-9]{2,6}$",message = "不满足邮箱正则表达式",groups = {Add.class,Update.class})  private String email;}</code></pre><blockquote><p>2、编写业务controller</p></blockquote><pre><code>@RestController@Api(tags = "用户管理")@Slf4jpublic class UserController {    @Autowired    private UserService userService;    @GetMapping(value="/get/{id}")    @ApiOperation("根据用户ID查找用户")    @ApiImplicitParam(value = "用户id",name = "id",required = true,paramType = "path")    public UserDTO getUserById(@PathVariable("id") Long id){        UserDTO dto = userService.getUserById(id);        log.info("{}",dto);        return dto;    }    @PostMapping(value="/add")    @ApiOperation("添加用户")    public UserDTO add(@RequestBody @Validated({Add.class}) UserDTO userDTO){        log.info("{}",userDTO);        return userService.save(userDTO);    }    @PostMapping(value="/update")    @ApiOperation("更新用户")    public UserDTO update(@RequestBody @Validated({Update.class}) UserDTO userDTO){        log.info("{}",userDTO);        return userService.save(userDTO);    }    @DeleteMapping(value="/detele")    @ApiOperation("删除用户")    public boolean delete(@Validated({Delete.class}) UserDTO userDTO){        log.info("id：{}",userDTO.getId());        return userService.delete(userDTO.getId());    }}</code></pre><p><strong>注：</strong> 业务service就不贴了和文章内容关系不大。如果感兴趣的朋友，可以从文末提供的链接进行查看</p><blockquote><p>3、利用swagger在线接口文档进行测试</p></blockquote><p>a：正常响应时，返回值形如下</p><pre><code>{  "status": 0,  "message": "success",  "data": {    "id": 1,    "userName": "zhangsan",    "realName": "张三",    "password": "123456",    "gender": 1,    "email": "zhangsan@qq.com"  }}</code></pre><p>b：当数据校验异常时，返回值形如下</p><pre><code>{  "status": 1,  "message": "姓名不能为空;",  "data": null}</code></pre><p>c:当业务异常时，返回值形如下</p><pre><code>{  "status": 1,  "message": "user is not found by id :3",  "data": null}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了如何利用@RestControllerAdvice和ResponseBodyAdvice来统一处理返回值。本文代码示例还实现了分组校验，自定义校验，利用mdc traceId日志埋点，如果对这些内容感兴趣的朋友，可以查看文末项目链接</p><h2 id="demo链接"><a href="#demo链接" class="headerlink" title="demo链接"></a>demo链接</h2><blockquote><p><a href="https://github.com/lyb-geek/springboot-learning/tree/master/springboot-unit-resp">https://github.com/lyb-geek/springboot-learning/tree/master/springboot-unit-resp</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot @Validated分组功能用在service层校验对象解决方案</title>
      <link href="2020/11/28/springboot-validated-service/"/>
      <url>2020/11/28/springboot-validated-service/</url>
      
        <content type="html"><![CDATA[<h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Validated</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>BrandMapper<span class="token punctuation">,</span> Brand<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">BrandService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Brand <span class="token function">getBrandByCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotBlank</span> String brandCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getById</span><span class="token punctuation">(</span>brandCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Create<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">saveBrand</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Update<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateBrand</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> Brand brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">updateById</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/blueheart20/article/details/88817754">https://blog.csdn.net/blueheart20/article/details/88817754</a></p><p><a href="https://reflectoring.io/bean-validation-with-spring-boot/">https://reflectoring.io/bean-validation-with-spring-boot/</a></p>]]></content>
      
      
      <categories>
          
          <category> develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> validated </tag>
            
            <tag> group </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排名前 16 的 Java 工具类</title>
      <link href="2020/11/24/java-tools-class/"/>
      <url>2020/11/24/java-tools-class/</url>
      
        <content type="html"><![CDATA[<p>在Java中，实用程序类是定义一组执行通用功能的方法的类。</p><p>这篇文章展示了最常用的Java实用工具类及其最常用的方法。类列表及其方法列表均按受欢迎程度排序。数据基于从GitHub随机选择的50,000个开源Java项目。</p><p>希望您可以通过浏览列表来了解已经提供和流行的功能的一些想法，以使您知道不需要自己实现。这些方法的名称通常指示它们的作用。如果方法名称不够直观，您还可以查看其他开发人员如何在其开源项目中使用它们。</p><ol><li><code>org.apache.commons.io.IOUtils</code></li></ol><pre><code>closeQuietly()  toString()  copy()  toByteArray()  write()  toInputStream()  readLines()  copyLarge()  lineIterator()  readFully()  </code></pre><ol><li><code>org.apache.commons.io.FileUtils</code></li></ol><pre><code>deleteDirectory()  readFileToString()  deleteQuietly()  copyFile()  writeStringToFile()  forceMkdir()  write()  listFiles()  copyDirectory()  forceDelete()  </code></pre><ol><li><code>org.apache.commons.lang.StringUtils</code></li></ol><pre><code>isBlank()  isNotBlank()  isEmpty()  isNotEmpty()  equals()  join()  split()  EMPTY  trimToNull()  replace()  </code></pre><ol><li><code>org.apache.http.util.EntityUtils</code></li></ol><pre><code>toString()  consume()  toByteArray()  consumeQuietly()  getContentCharSet()  </code></pre><ol><li><code>org.apache.commons.lang3.StringUtils</code></li></ol><pre><code>isBlank()  isNotBlank()  isEmpty()  isNotEmpty()  join()  equals()  split()  EMPTY  replace()  capitalize()  </code></pre><ol><li><code>org.apache.commons.io.FilenameUtils</code></li></ol><pre><code>getExtension()  getBaseName()  getName()  concat()  removeExtension()  normalize()  wildcardMatch()  separatorsToUnix()  getFullPath()  isExtension()  </code></pre><ol><li><code>org.springframework.util.StringUtils</code></li></ol><pre><code>hasText()  hasLength()  isEmpty()  commaDelimitedListToStringArray()  collectionToDelimitedString()  replace()  delimitedListToStringArray()  uncapitalize()  collectionToCommaDelimitedString()  tokenizeToStringArray()  </code></pre><ol><li><code>org.apache.commons.lang.ArrayUtils</code></li></ol><pre><code>contains()  addAll()  clone()  isEmpty()  add()  EMPTY_BYTE_ARRAY  subarray()  indexOf()  isEquals()  toObject()  </code></pre><ol><li><code>org.apache.commons.lang.StringEscapeUtils</code></li></ol><pre><code>escapeHtml()  unescapeHtml()  escapeXml()  escapeSql()  unescapeJava()  escapeJava()  escapeJavaScript()  unescapeXml()  unescapeJavaScript()  </code></pre><ol><li><code>org.apache.http.client.utils.URLEncodedUtils</code></li></ol><pre><code>format()  parse()  </code></pre><ol><li><code>org.apache.commons.codec.digest.DigestUtils</code></li></ol><pre><code>md5Hex()  shaHex()  sha256Hex()  sha1Hex()  sha()  md5()  sha512Hex()  sha1()  </code></pre><ol><li><code>org.apache.commons.collections.CollectionUtils</code></li></ol><pre><code>isEmpty()  isNotEmpty()  select()  transform()  filter()  find()  collect()  forAllDo()  addAll()  isEqualCollection()  </code></pre><ol><li><code>org.apache.commons.lang3.ArrayUtils</code></li></ol><pre><code>contains()  isEmpty()  isNotEmpty()  add()  clone()  addAll()  subarray()  indexOf()  EMPTY_OBJECT_ARRAY  EMPTY_STRING_ARRAY  </code></pre><ol><li><code>org.apache.commons.beanutils.PropertyUtils</code></li></ol><pre><code>getProperty()  setProperty()  getPropertyDescriptors()  isReadable()  copyProperties()  getPropertyDescriptor()  getSimpleProperty()  isWriteable()  setSimpleProperty()  getPropertyType()  </code></pre><ol><li><code>org.apache.commons.lang3.StringEscapeUtils</code></li></ol><pre><code>unescapeHtml4()  escapeHtml4()  escapeXml()  unescapeXml()  escapeJava()  escapeEcmaScript()  unescapeJava()  escapeJson()  escapeXml10()  </code></pre><ol><li><code>org.apache.commons.beanutils.BeanUtils</code></li></ol><pre><code>copyProperties()  getProperty()  setProperty()  describe()  populate()  copyProperty()  cloneBean()  </code></pre><p>来源：<a href="https://www.programcreek.com/">https://www.programcreek.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 超实用技巧</title>
      <link href="2020/11/24/intellij-idea-skills/"/>
      <url>2020/11/24/intellij-idea-skills/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>工欲善其事</p><p> 必先利其器</p></blockquote><p>最近受部门的邀请，给入职新人统一培训IDEA，发现有很多新人虽然日常开发使用的是IDEA，但是还是很多好用的技巧没有用到，只是用到一些基本的功能，蛮浪费IDEA这个优秀的IDE。 同时，在这次分享之后，本人自己也学习到了一些新的使用技巧，所以借着这次机会，一起分享出来。希望可以帮到一些人。</p><blockquote><p>基于的 IDEA 版本信息：IntelliJ IDEA 2018.2.2 (Ultimate Edition)</p></blockquote><p>知识点概览：</p><ul><li>高效率配置</li><li>日常使用 必备快捷键（★★）<ul><li>查找</li><li>跳转切换</li><li>编码相关</li><li>代码阅读相关</li><li>版本管理相关</li></ul></li><li>编码效率相关（★★）<ul><li>文件代码模板</li><li>实时代码模板</li><li>其他</li></ul></li><li>代码调试 源码阅读相关（★★★）<ul><li>视图模式</li><li>代码调试</li><li>…</li></ul></li><li>插件方面<ul><li>插件的安装与使用</li><li>插件推荐</li></ul></li><li>参考</li></ul><hr><h4 id="2019-08-09-UPDATE"><a href="#2019-08-09-UPDATE" class="headerlink" title="2019-08-09 UPDATE"></a>2019-08-09 UPDATE</h4><p>[插件推荐]增加图片描述，增加插件内容。阅读更友好。</p><hr><h3 id="高效率配置"><a href="#高效率配置" class="headerlink" title="高效率配置"></a>高效率配置</h3><h4 id="1-代码提示不区分大小写"><a href="#1-代码提示不区分大小写" class="headerlink" title="1. 代码提示不区分大小写"></a>1. 代码提示不区分大小写</h4><pre><code>Settings -&gt; Editor -&gt; General -&gt; Code Completion</code></pre><p><img src="/2020/11/24/intellij-idea-skills/1.jpg" alt="img"></p><p>(低版本 将 Case sensitive completion 设置为 None 就可以了)</p><h4 id="2-自动导包功能及相关优化功能"><a href="#2-自动导包功能及相关优化功能" class="headerlink" title="2. 自动导包功能及相关优化功能"></a>2. 自动导包功能及相关优化功能</h4><pre><code>Settings -&gt; Editor -&gt; General -&gt; Auto Import</code></pre><p><img src="/2020/11/24/intellij-idea-skills/2495526922-5d47f467e4aee_articlex.jfif" alt="img"></p><h4 id="3-CTRL-滑动滚轮-调整窗口显示大小"><a href="#3-CTRL-滑动滚轮-调整窗口显示大小" class="headerlink" title="3. CTRL + 滑动滚轮 调整窗口显示大小"></a>3. CTRL + 滑动滚轮 调整窗口显示大小</h4><pre><code>Settings -&gt; Editor -&gt; General -&gt; Change font size (Zoom) with Ctrl+Mouse wheel</code></pre><p><img src="/2020/11/24/intellij-idea-skills/728192460-5d47f46749132_articlex.jfif" alt="img"></p><p>选择之后，就可以通过CTRL+滑动滚轮的方式，调整编辑器窗口的字体大小</p><h4 id="4-tab-多行显示"><a href="#4-tab-多行显示" class="headerlink" title="4. tab 多行显示"></a>4. tab 多行显示</h4><p>这点因人而异，有些人喜欢直接取消所有tab，改用快捷键的方式，我屏幕比较大，所以喜欢把tab全部显示出来。</p><p><code>Window -&gt; Editor Tabs -&gt; Tabs Placement</code>，取消勾选 <code>Show Tabs In Single Row</code>选项。</p><p><img src="/2020/11/24/intellij-idea-skills/3370201002-5d47f467aac8b_articlex.jfif" alt="img"></p><p>效果如下：</p><p><img src="/2020/11/24/intellij-idea-skills/4172153788-5d47f46522c6c_articlex.jfif" alt="img"></p><h4 id="5-代码编辑区显示行号"><a href="#5-代码编辑区显示行号" class="headerlink" title="5. 代码编辑区显示行号"></a>5. 代码编辑区显示行号</h4><pre><code>Settings -&gt; Editor -&gt; General -&gt; Appearance `勾选 `Show Line Numbers</code></pre><p><img src="/2020/11/24/intellij-idea-skills/3589429929-5d47f5ae548ea_articlex.jfif" alt="img"></p><p><img src="/2020/11/24/intellij-idea-skills/1829319116-5d47f4654e925_articlex.jfif" alt="img"></p><p>6….</p><h3 id="日常使用-必备快捷键（★★）"><a href="#日常使用-必备快捷键（★★）" class="headerlink" title="日常使用 必备快捷键（★★）"></a>日常使用 必备快捷键（★★）</h3><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件进行文本查找</td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换</td></tr><tr><td>Shift + Ctrl + F</td><td>在项目进行文本查找</td></tr><tr><td>Shift + Ctrl + R</td><td>在项目进行文本替换</td></tr><tr><td>Shift + Shift</td><td>快速搜索</td></tr><tr><td>Ctrl + N</td><td>查找class</td></tr><tr><td>Ctrl + Shift + N</td><td>查找文件</td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>查找symbol（查找某个方法名）</td></tr></tbody></table><h4 id="跳转切换"><a href="#跳转切换" class="headerlink" title="跳转切换"></a>跳转切换</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + E</td><td>最近文件</td></tr><tr><td>Ctrl + Tab</td><td>切换文件</td></tr><tr><td>Ctrl + Alt + ←/→</td><td>跳转历史光标所在处</td></tr><tr><td>Alt + ←/→ 方向键</td><td>切换子tab</td></tr><tr><td>Ctrl + G</td><td>go to（跳转指定行号）</td></tr></tbody></table><h4 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + W</td><td>快速选中</td></tr><tr><td>(Shift + Ctrl) + Alt + J</td><td>快速选中同文本</td></tr><tr><td>Ctrl + C/Ctrl + X/Ctrl + D</td><td>快速复制或剪切</td></tr><tr><td>多行选中 Tab / Shift + Tab</td><td>tab</td></tr><tr><td>Ctrl + Y</td><td>删除整行</td></tr><tr><td>滚轮点击变量/方法/类</td><td>快速进入变量/方法/类的定义处</td></tr><tr><td>Shift + 点击Tab</td><td>快速关闭tab</td></tr><tr><td>Ctrl + Z 、Ctrl + Shift + Z</td><td>后悔药，撤销/取消撤销</td></tr><tr><td>Ctrl + Shift + enter</td><td>自动收尾，代码自动补全</td></tr><tr><td>Alt + enter</td><td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td>Alt + ↑/↓</td><td>方法快速跳转</td></tr><tr><td>F2</td><td>跳转到下一个高亮错误 或 警告位置</td></tr><tr><td>Alt + Insert</td><td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td>Ctrl + Shift + L</td><td>格式化代码</td></tr><tr><td>Shift + F6</td><td>快速修改方法名、变量名、文件名、类名等</td></tr><tr><td>Ctrl + F6</td><td>快速修改方法签名</td></tr></tbody></table><h4 id="代码阅读相关"><a href="#代码阅读相关" class="headerlink" title="代码阅读相关"></a>代码阅读相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + P</td><td>方法参数提示显示</td></tr><tr><td>Ctrl + Shift + i</td><td>就可以在当前类里再弹出一个窗口出来</td></tr><tr><td>Alt + F7</td><td>可以列出变量在哪些地方被使用了</td></tr><tr><td>光标在子类接口名，Ctrl + u</td><td>跳到父类接口</td></tr><tr><td>Alt + F1 + 1， esc</td><td></td></tr><tr><td>(Shift) + Ctrl + +/-</td><td>代码块折叠</td></tr><tr><td>Ctrl + Shift + ←/→</td><td>移动窗口分割线</td></tr><tr><td>Ctrl + (Alt) + B</td><td>跳转方法定义/实现</td></tr><tr><td>Ctrl + H</td><td>类的层级关系</td></tr><tr><td>Ctrl + F12</td><td>Show Members 类成员快速显示</td></tr></tbody></table><h4 id="版本管理相关"><a href="#版本管理相关" class="headerlink" title="版本管理相关"></a>版本管理相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + D</td><td>Show Diff</td></tr><tr><td>(Shift) + F7</td><td>（上）下一处修改</td></tr></tbody></table><blockquote><p>更多快捷键请参考此文章</p><p><a href="https://github.com/judasn/Int">https://github.com/judasn/Int</a>…</p><p><strong>mac os</strong> 快捷键请参考本文章 <a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial/blob/master/keymap-win-mac.md">https://github.com/judasn/Int…</a></p></blockquote><h3 id="编码效率相关（★★）"><a href="#编码效率相关（★★）" class="headerlink" title="编码效率相关（★★）"></a>编码效率相关（★★）</h3><h4 id="文件代码模板"><a href="#文件代码模板" class="headerlink" title="文件代码模板"></a>文件代码模板</h4><pre><code>Settings -&gt; Editor -&gt; File and Code Template</code></pre><p><img src="/2020/11/24/intellij-idea-skills/2754792117-5d47f4680b132_articlex.jfif" alt="img"></p><p>在这里可以看到IDEA所有内置的文件代码模板，当你选择某个文件生成时，就会按照这里面的模板生成指定的代码文件。</p><p>另外，你可以在这里设置文件头。</p><p><img src="/2020/11/24/intellij-idea-skills/3923464073-5d47f6e6eee45_articlex.jfif" alt="img"></p><p>设置之后，效果如下</p><p><img src="/2020/11/24/intellij-idea-skills/2591569098-5d47f464eb1b5_articlex.jfif" alt="img"></p><h4 id="实时代码模板"><a href="#实时代码模板" class="headerlink" title="实时代码模板"></a>实时代码模板</h4><p>IDEA提供了强大的实时代码模板功能，并且原生内置了很多的模板，比如，当你输入<code>sout</code>或者<code>psvm</code>，就会快速自动生成<code>System.out.println();</code>和<code>public static void main(String[] args) {}</code>的代码块。</p><p><img src="/2020/11/24/intellij-idea-skills/3065273944-5d47f464d7f9e_articlex.jfif" alt="img"></p><p><img src="/2020/11/24/intellij-idea-skills/546789878-5d47f464b60fa_articlex.jfif" alt="img"></p><p>这些的模板可以在<code>Settings -&gt; Editor -&gt; Live Templates </code>看到。使用者可以按照自己的使用习惯来熟悉相关的代码模板。</p><p><img src="/2020/11/24/intellij-idea-skills/415570660-5d47f6e371702_articlex.jfif" alt="img"></p><h5 id="定制代码模板"><a href="#定制代码模板" class="headerlink" title="定制代码模板"></a>定制代码模板</h5><p>IDEA也提供自己定制实时代码模板的功能。</p><ol><li>创建自己的模板库</li><li>创建定制的代码模板</li></ol><p><img src="/2020/11/24/intellij-idea-skills/4292259647-5d47f464e180c_articlex.jfif" alt="img"></p><p>图中的<code>MyGroup</code>就存放着我自己定义的代码模板。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="CRTL-ALT-T"><a href="#CRTL-ALT-T" class="headerlink" title="CRTL+ALT+T"></a>CRTL+ALT+T</h5><p><img src="/2020/11/24/intellij-idea-skills/1460000019977280.jpg" alt="img"></p><p><code>Ctrl + Alt + T</code> 提供的是代码块包裹功能 - Surround With。可以快速将选中的代码块，包裹到选择的语句块中。</p><h5 id="本地历史版本"><a href="#本地历史版本" class="headerlink" title="本地历史版本"></a>本地历史版本</h5><p>IDEA 自带本地版本管理的功能，能够让你本地编写代码变得更加的安心和方便。</p><p><img src="/2020/11/24/intellij-idea-skills/1460000019977281.jpg" alt="img"></p><h3 id="代码调试-源码阅读相关（★★★）"><a href="#代码调试-源码阅读相关（★★★）" class="headerlink" title="代码调试 源码阅读相关（★★★）"></a>代码调试 源码阅读相关（★★★）</h3><h4 id="视图模式"><a href="#视图模式" class="headerlink" title="视图模式"></a>视图模式</h4><p><img src="/2020/11/24/intellij-idea-skills/1460000019977529.jpg" alt="img"></p><p>IDEA提供两种特殊的视图模式，</p><ol><li>Presentation Mode - 演示模式，专门用于Code Review这种需要展示代码的场景</li><li>Distraction Free Mode - 禅模式，专注于代码开发</li></ol><h4 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h4><h5 id="1-条件断点"><a href="#1-条件断点" class="headerlink" title="1. 条件断点"></a>1. 条件断点</h5><p>IDEA 可以设置指定条件的断点，增加我们调试的效率。</p><img src="/2020/11/24/intellij-idea-skills/abc.jpg" alt="img"><h5 id="2-强制返回"><a href="#2-强制返回" class="headerlink" title="2. 强制返回"></a>2. 强制返回</h5><p>IDEA 可以在打断点的方法栈处，强制返回你想要的方法返回值给调用方。非常灵活！</p><img src="/2020/11/24/intellij-idea-skills/1460000019977282.jpg" alt="img"><p><img src="/2020/11/24/intellij-idea-skills/1460000019977283.jpg" alt="img"></p><h5 id="3-模拟异常"><a href="#3-模拟异常" class="headerlink" title="3. 模拟异常"></a>3. 模拟异常</h5><p>IDEA 可以在打断点的方法栈处，强制抛出异常给调用方。这个在调试源码的时候非常有用。</p><p><img src="/2020/11/24/intellij-idea-skills/1460000019977284.jpg" alt="img"></p><h5 id="4-Evaluate-Expression"><a href="#4-Evaluate-Expression" class="headerlink" title="4. Evaluate Expression"></a>4. Evaluate Expression</h5><p>IDEA 还可以在调试代码的时候，动态修改当前方法栈中变量的值，方便我们的调试。</p><p><img src="/2020/11/24/intellij-idea-skills/1460000019977531.jpg" alt="img"></p><h3 id="插件方面"><a href="#插件方面" class="headerlink" title="插件方面"></a>插件方面</h3><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><pre><code>File -&gt; Setting -&gt; Plugin</code></pre><p>插件安装，可以直接在IDEA的插件库中实时搜索安装。<code>browse plugin repository</code></p><p>对于<strong>网络不好</strong>的用户，可以登录官方插件仓库地址：<a href="https://plugins.jetbrains.com/idea">https://plugins.jetbrains.com…</a>，下载压缩包之后，选择<code>install from disk</code></p><h4 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h4><p>本人日常开发中使用的插件</p><h5 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h5><p>阿里Java编程规约插件</p><h5 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a>FindBugs</h5><p>代码缺陷扫描</p><p><img src="/2020/11/24/intellij-idea-skills/sadfsadf.jpg" alt="img"></p><p><img src="/2020/11/24/intellij-idea-skills/sadfsaf.jpg" alt="img"></p><h5 id="PMD"><a href="#PMD" class="headerlink" title="PMD"></a>PMD</h5><p>代码缺陷扫描</p><h5 id="InnerBuilder"><a href="#InnerBuilder" class="headerlink" title="InnerBuilder"></a>InnerBuilder</h5><p>builder模式快速生成</p><p><img src="/2020/11/24/intellij-idea-skills/ddddd.jpg" alt="img"></p><h5 id="lombok-plugin"><a href="#lombok-plugin" class="headerlink" title="lombok plugin"></a>lombok plugin</h5><p>lombok 插件</p><h5 id="maven-helper"><a href="#maven-helper" class="headerlink" title="maven helper"></a>maven helper</h5><p>maven 依赖管理助手 ，解析maven pom结构，分析冲突；</p><p><img src="/2020/11/24/intellij-idea-skills/3l450-2134912873.jpg" alt="img"></p><p><img src="/2020/11/24/intellij-idea-skills/sdafsadfddd.jpg" alt="img"></p><h5 id="Rainbow-brackets"><a href="#Rainbow-brackets" class="headerlink" title="Rainbow brackets"></a>Rainbow brackets</h5><p>让代码中的括号更具标识性</p><p><img src="/2020/11/24/intellij-idea-skills/dddd.jpg" alt="img"></p><h5 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h5><p>String相关辅助简化，搭配 CTRL+W 、ALT+J等文本选择快捷键使用</p><p><img src="/2020/11/24/intellij-idea-skills/3332.gif" alt="img"></p><h5 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h5><p>翻译插件，阅读源码必备</p><p><img src="/2020/11/24/intellij-idea-skills/146000002001721.jpg" alt="img"></p><p><img src="/2020/11/24/intellij-idea-skills/146000002001.jpg" alt="img"></p><h5 id="GenerateAllSetter"><a href="#GenerateAllSetter" class="headerlink" title="GenerateAllSetter"></a>GenerateAllSetter</h5><p><img src="/2020/11/24/intellij-idea-skills/3726146879-5d4cce11103f7_articlex.gif" alt="img"></p><h5 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h5><p>对你的鼠标操作进行 快捷键提示</p><p><img src="/2020/11/24/intellij-idea-skills/1460000020017219.gif" alt="img"></p><h5 id="GenerateSerialVersionUID"><a href="#GenerateSerialVersionUID" class="headerlink" title="GenerateSerialVersionUID"></a>GenerateSerialVersionUID</h5><p><code>Alt</code> + <code>Insert</code> 快速生成SerialVersionUID</p><p><img src="/2020/11/24/intellij-idea-skills/1460000020017220.gif" alt="img"></p><h5 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h5><p><img src="/2020/11/24/intellij-idea-skills/1460000020017221.gif" alt="img"></p><h5 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h5><ol><li>快速跳转到Restful Api处( use: Ctrl(Command) + or Ctrl + Alt + N )</li><li>展示Resultful 接口结构</li><li>http 简单请求工具</li></ol><p><img src="/2020/11/24/intellij-idea-skills/146000002001722.jpg" alt="img"></p><p><img src="/2020/11/24/intellij-idea-skills/14600000200172.jpg" alt="img"></p><h5 id="Material-Theme-UI"><a href="#Material-Theme-UI" class="headerlink" title="Material Theme UI"></a>Material Theme UI</h5><p>本人自用的主题就是这个。</p><p><img src="/2020/11/24/intellij-idea-skills/1460000020017.jpg" alt="img"></p><h5 id="MyBatis-Log-Plugin"><a href="#MyBatis-Log-Plugin" class="headerlink" title="MyBatis Log Plugin"></a>MyBatis Log Plugin</h5><p>把 Mybatis 输出的sql日志还原成完整的sql语句，看起来更直观。<br><img src="/2020/11/24/intellij-idea-skills/dddsddddafsa.jpg" alt="img"></p><h5 id="Free-Mybatis"><a href="#Free-Mybatis" class="headerlink" title="Free Mybatis"></a>Free Mybatis</h5><p>MyBatis 免费的插件</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial"></a></p>]]></content>
      
      
      <categories>
          
          <category> develop </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Commond</title>
      <link href="2020/11/24/linux-commond/"/>
      <url>2020/11/24/linux-commond/</url>
      
        <content type="html"><![CDATA[<ul><li><p>查询端口监听情况</p><blockquote><p>netstat -lnp | grep</p></blockquote></li><li><p>查询java运行程序</p><blockquote><p>jps</p></blockquote></li><li><p>临时切换用户并执行命令</p><blockquote><p>su - esuser-c “/opt/elasticsearch-6.1.3/bin/elasticsearch -d”     # 切换esuser并启动elasticsearch</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch在CentOS环境下开机启动</title>
      <link href="2020/11/24/elasticsearch-zai-centos-huan-jing-xia-kai-ji-qi-dong/"/>
      <url>2020/11/24/elasticsearch-zai-centos-huan-jing-xia-kai-ji-qi-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="elasticsearch在CentOS环境下开机启动"><a href="#elasticsearch在CentOS环境下开机启动" class="headerlink" title="elasticsearch在CentOS环境下开机启动"></a>elasticsearch在CentOS环境下开机启动</h1><h4 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h4><p>​        OS版本：CentOS-7-x86_64-Minimal-1708；ES版本：elasticsearch-7.4.0.</p><h4 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h4><ol><li><p>在/etc/init.d/目录创建es文件</p><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/init.d/es<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件内容：</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash##chkconfig: 345 63 37#description: elasticsearch#processname: elasticsearch-7.4.0ES_HOME=/usr/local//usr/local/elasticsearch-7.4.0case $1 in  start)    su - es_user -c "$ES_HOME/bin/elasticsearch -d -p pid"    echo "elasticsearch is started"    ;;  stop)    pid=`cat $ES_HOME/pid`    kill -9 $pid    echo "elasticsearch is stopped"    ;;  restart)    pid=`cat $ES_HOME/pid`    kill -9 $pid    echo "elasticsearch is stopped"    sleep 1    su - es_user -c "$ES_HOME/bin/elasticsearch -d -p pid"    echo "elasticsearch is started"    ;;  *)    echo "start|stop|restart"    ;;  esacexit 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>修改上面文件的权限，执行命令</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 777 /etc/init.d/es<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p>添加和删除服务并设置启动方式（chkconfig具体使用另行百度）</p><pre class="line-numbers language-shell"><code class="language-shell">chkconfig --add eschkconfig --del es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>启动和关闭服务</p><pre class="line-numbers language-shell"><code class="language-shell">service es start    // 启动服务service es stop     // 关闭服务service es restart  // 重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>设置服务的启动方式</p><pre class="line-numbers language-shell"><code class="language-shell">chkconfig es on  // 设置开机启动chkconfig es off // 关闭开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> develop </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VS Code的REST客户端插件即可进行API调用</title>
      <link href="2020/11/22/restfull-request-tool-for-vscode/"/>
      <url>2020/11/22/restfull-request-tool-for-vscode/</url>
      
        <content type="html"><![CDATA[<p><strong>为什么要离开IDE去测试新的API？现在你不必这样做了。</strong></p><h2 id="我们如何获取数据"><a href="#我们如何获取数据" class="headerlink" title="我们如何获取数据"></a>我们如何获取数据</h2><p>如果你已经做了很长时间的Web开发，你可能知道我们的很多工作都是围绕着数据展开的：读取数据、写入数据、操作数据，并以合理的方式在浏览器中显示出来。</p><p>而这些数据绝大部分都是由REST API端点提供的，通俗地说：我们想要的数据存在于其他服务或数据库中，我们的应用程序查询该服务来检索数据，并根据自己的需要使用数据。</p><p>在过去，为了在连接UI以接受数据之前测试REST API，通常必须通过终端的命令行查询API，或者使用像Insomnia或Postman这样的GUI(我在之前的博客中对它们进行了比较)。</p><p>但现在，如果你使用VS Code（为什么不呢，用它写代码多好啊！），生活就变得简单了。我们不再需要退出IDE来测试API，因为现在已经有一个插件可以做到这一点：<a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">REST Client</a>。</p><p>使用REST Client是非常简单的，我将向您展示这个插件是多么简单，而且功能齐全。</p><h2 id="认识VS-Code-REST-Client插件"><a href="#认识VS-Code-REST-Client插件" class="headerlink" title="认识VS Code REST Client插件"></a>认识VS Code REST Client插件</h2><p>我是VS Code这个代码编辑器的粉丝，已经有好几年了，每次得知有人创建了一个新的有用的插件并添加到VS Code市场，我都会无比感激。</p><p>所以当我决定每次需要测试一个新的API路由时，都要启动Postman或Insomnia是一件很痛苦的事情，我发现了REST Client 这个插件，可以让这一切变得不必要。</p><p>REST Client是迄今存在的工具的最明显名称，其VS Code市场描述准确地概括了其功能：“REST Client允许您发送HTTP请求并直接在Visual Studio Code中查看响应。”</p><p>就这么简单。然后，它会提供大量的详细信息以及使用方法的示例，但实际上，它是VS Code中内置的HTTP工具。因此，让我们开始使用它。</p><h3 id="安装REST-Client"><a href="#安装REST-Client" class="headerlink" title="安装REST Client"></a>安装REST Client</h3><p>要找到它，打开VS Code中的市场扩展（左侧面板上的俄罗斯方块小图标），在搜索栏中输入 “rest client”，然后安装列表中的第一个结果（作者应该是Huachao Mao）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b33d9065a224205a79e67822e49de5e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>安装完成后，我们可以继续进行设置。</p><h3 id="设置REST-Client脚本"><a href="#设置REST-Client脚本" class="headerlink" title="设置REST Client脚本"></a>设置REST Client脚本</h3><p>只需在项目的根目录下创建一个以 <code>.http</code> 结尾的文件，REST Client可以识别出这一点，并且知道它应该能够运行来自该文件的HTTP请求。</p><p>在测试的时候，我把几年前做的一个docker化的全栈MERN登录应用，把一个我命名为 <code>test.http</code> 的文件丢到项目文件夹的根目录。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b88b62e037544f29bbdb0c17ac74fae3~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="测试一下：基本操作"><a href="#测试一下：基本操作" class="headerlink" title="测试一下：基本操作"></a>测试一下：基本操作</h2><p>这是很酷的部分：在我的经验中，这个小小的REST Client插件能够做的事情和Postman等更复杂的API客户端一样多。</p><p>下面，我将向你展示如何进行每一种类型的基本CRUD操作，再加上如何像JWT令牌一样进行需要认证的API调用，使用我在本地运行的MERN用户注册应用来指向调用。</p><h3 id="POST示例"><a href="#POST示例" class="headerlink" title="POST示例"></a>POST示例</h3><p>我将介绍的第一个示例是REST Client的 <code>POST</code>，因为用户在我的应用程序中必须先注册才能进行其他任何操作（毕竟，这只是一个登录服务）。</p><p>因此，该代码将在 <code>test.http</code> 文件中显示。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5b2eb13d003451aa4e8a0031d636898~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>好的，让我们回顾一下上面的代码片段中发生的事情。</p><p>REST Client为了正常工作所需要的第一件事是发出请求的类型及其尝试访问的路由的完整URL路径。在这种情况下，请求是POST，URL是 <code>http://localhost:3003/registerUser</code>。第一行末尾的 <code>HTTP/1.1</code> 与RFC 2616建立的标准有关，但是我不确定是否有必要，因此我将其保留只是为了安全。</p><p>然后，因为这是一个 <code>POST</code>，所以在请求中要包含一个JSON体，注意 <code>Content-Type</code> 和 <code>body</code> 之间有一行空行——这是REST Client有意要求的。所以，我们把所需的字段填好，然后，在 <code>POST</code> 上面应该会出现一个小小的 <code>send Request</code> 选项。把鼠标放在上面，然后点击，看看会有什么结果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38251f08b2c64f608da4a69a6547042e~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>您最后要注意的是 <code>test.http</code> 文件中请求后的 <code>###</code> ，这是请求之间的分隔符，只要在每个请求之间插入 <code>###</code> 就可以在文件中包含任意数量的请求。</p><p>如果请求成功，您将看到与我上面发布的内容类似的内容。即使请求不成功，你仍然会得到所有这些关于刚才发生的信息，以及（希望）出了什么问题。爽啊</p><h3 id="GET示例"><a href="#GET示例" class="headerlink" title="GET示例"></a>GET示例</h3><p>现在已经创建了一个用户，比方说我们忘记了他们的密码，他们发了一封邮件来找回密码。电子邮件中包含令牌和链接，该链接会将他们带到页面以重置密码。</p><p>一旦他们点击了链接并登陆页面，一个 <code>GET</code> 请求就会被启动，以确保邮件中包含的用于重置密码的令牌是有效的，这就是它可能的样子。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7568ce65c5cb45c9959e27955af2d5a8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>我的 <code>GET</code> 指向了 <code>/reset</code> 端点，并在服务端附加了验证所需的 <code>resetPasswordToken</code> 查询参数。<code>Content-Type</code> 仍为 <code>application/json</code>，底部的 <code>###</code> 将此请求与文件中的任何其他请求分开。</p><p>如果令牌确实有效，则服务器的响应如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96614ed1e8d2465caa6c139d2b999e48~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>而这就是GET请求所需要的全部内容，他们不用担心请求体的问题。</p><h3 id="Update示例"><a href="#Update示例" class="headerlink" title="Update示例"></a>Update示例</h3><p>接下来是CRUD中的U：更新。假设用户想更新其个人资料信息中的某些内容。使用REST Client也不难。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e19cfa68a234413b10b0f7dfc1e3b51~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>对于这个请求，请求类型更新为 <code>PUT</code>，body包括该对象上需要更新的任何字段。在我的应用程序中，用户可以更新其名字，姓氏或电子邮件。</p><p>因此，在传递正文时，如果REST Client成功击中PUT端点，则这就是VS Code中的Response选项卡的样子。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1edf960fc2ea44c194070d20b1ff8d8c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>到此为止，让我们继续进行身份验证示例。因为据我所知，没有保护路由的应用程序很少，需要某种认证。</p><h3 id="Authentication示例"><a href="#Authentication示例" class="headerlink" title="Authentication示例"></a>Authentication示例</h3><p>REST Client支持的不同身份验证格式的广度再一次让我印象深刻。在撰写本文时，REST Client的文档说它支持六种流行的身份验证类型，包括对JWT身份验证的支持，这是我的应用程序在所有受保护的路由上都依赖的身份验证类型。</p><p>因此，事不宜迟，这里是我需要验证的端点之一：在数据库中查找用户的信息。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7928f47cfd4977933702d1df64f77c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>在REST Client请求中添加授权真的很简单：简单地在路由和 content-type 被声明的地方下面添加键 <code>Authorization</code>，然后（至少对我的情况而言）我添加JWT的键和值（因为它们出现在浏览器的本地存储中）作为 <code>Authorization</code> 头的值。</p><p>这样就变成了：</p><pre><code>Authorization: jwt XXXXXXXXXXXXXXXXXX复制代码</code></pre><p>然后只需发送请求，看看会发生什么。</p><p>如果您的身份验证配置正确，您将收到来自服务器的某种类型的200响应，对于我的请求，它将返回存储在数据库中的与该用户相关的所有信息，以及一个成功找到该用户的消息。</p><p>这部分可能需要一些尝试和错误，但如果您能够弄清楚一个成功的请求是如何在浏览器的Dev Tools网络调用中发出的，通过现有的Swagger端点，或者通过其他类似的文档，这是非常值得的。</p><h3 id="DELETE示例"><a href="#DELETE示例" class="headerlink" title="DELETE示例"></a>DELETE示例</h3><p>经过我上面提供的其他例子，这个示例应该很简单</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0df2e36815f412eab2492cacb67458b~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这个 <code>DELETE</code> 需要的查询参数是 <code>username</code>，这样它就知道到底要删除数据库中的哪个用户，而且还需要验证这个用户是否有资格提出这个请求。除此以外，这里就没有什么其他的新东西可以介绍了。</p><p>![img](data:image/svg+xml;utf8,<!--?xml version="1.0"?--><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>)</p><p>这实际上只是REST Client可以做的冰山一角。我涵盖了REST请求和一种形式的认证，但它也可以支持GraphQL请求、多种其他类型的认证、环境和自定义变量、查看和保存原始响应等等。</p><p>我强烈建议您查阅文档，以了解REST Client的所有功能，它非常强大。</p><blockquote><p>REST Client文档：<a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">https://marketplace.visualstudio.com/items?itemName=humao.rest-client</a></p></blockquote><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>数据驱动着互联网，而随着职业生涯的进一步发展，Web开发人员最终会变得非常善于访问和转换数据以满足自己的需求。</p><p>以前，当获取托管在其他地方的数据时，Web开发人员经常会求助于Postman或Insomnia这样的工具，以拥有比命令行稍微好一点的界面，但现在有一个VS Code插件，它让代码编辑器之外的需求成为了过去，它叫REST Client，非常棒。</p><p>CRUD操作？没问题！支持GraphQL？没问题！认证选项？没问题！REST Client提供了所有这些选项以及更多，而且设置和使用起来非常简单。我肯定会在以后的项目中更多地使用它。</p><p>请过几周再回来看看——我将写更多有关JavaScript，React，ES6或其他与Web开发相关的内容。</p><p>谢谢你的阅读。我希望你能考虑用REST Client来处理你未来可能需要做的任何API查询，我想你会对它能提供的愉快体验感到惊喜，不需要任何API GUI。 🙂</p><p>作者：杭州程序员张张<br>链接：<a href="https://juejin.cn/post/6897863358964629511">https://juejin.cn/post/6897863358964629511</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> develop </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restfull </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理策略方案分析与总结</title>
      <link href="2020/11/22/git-branch-manage-summary/"/>
      <url>2020/11/22/git-branch-manage-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着Git的流行，越来越多的团队在往Git迁移或者转型，在团队建设初期或者中期转型优化，合适的Git分支管理策略方案能够较好的提高团队的效率，节约人员成本，降低代码版本管理带来的风险。笔者曾经历过因为分支管理策略不合适、人员操作不规范引发的代码版本混乱、线上版本与生产版本不一致等问题。本文旨在对几种Git分支管理策略进行梳理总结，对适用场景做探讨分析。同时非常渴望各位提出指正问题，共同沟通探讨更适用的解决方案。</p><h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><p>本文将通过对Git Flow、GitHub Flow、GitLab Flow三种流行的工作流程模型进行分析，总结各模型的优缺点与适用场景</p><h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3d29949272d429c9bf2625cb8d55903~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>Git Flow模型声明了以下5个分支：</p><ul><li>Master<br> 与生产保持一致，同时也是发布的分支（需要严格控制合并权限）</li><li>Develop<br> 基于Master检出的开发分支，保持最新开发进度的稳定分支（需要控制合并权限）</li><li>Feature Branch<br> 基于Develop检出特性分支，用于功能开发的分支，完成功能开发后合并到Develop分支</li><li>Release Branch<br> 基于Develop分支检出的预发布分支，用与预发布测试，测试完成后合并到Develop，合并到Master发布，合并时需要标记版本Tag，用于区分历史版本，合并完成后删除</li><li>Hotfix Branch<br> 基于Master检出的热点分支，用于修复生产bug，修复完成后合并到Develop，合并到Master发布，标记版本Tag</li></ul><h3 id="开发流程简述"><a href="#开发流程简述" class="headerlink" title="开发流程简述"></a>开发流程简述</h3><p>单个需求开发：</p><ol><li>默认存在Master，Develop分支，在工程初始化阶段基于Master检出Develop（前置工作）</li><li>此时开发人员收到需求需要开发A功能，从Develop检出Feature—A用于A功能的开发</li><li>A功能开发完成，将Feature—A分支合并到Develop分支，并进行初步的测试</li><li>从Develop检出Release-A分支用于测试，用于回归测试，并且修复bug</li><li>将测试好的Release-A分支合并Develop，合并到Master发布，并打上版本标签</li><li>当生产出现bug时，从master检出Hotfix-fixbug分支修复bug，修复后合并到Develop，合并到Master发布，并打上版本标签</li></ol><p>多个需求并行开发：<br> 与单个需求开发的步骤基本一致，但要在合适的时间将Develop再合并到特性分支，避免多个版本交叉影响的风险（比如A功能的修改，对B功能的修改也有影响，此时应在A合并Develop后，主动将Develop合并到Feature—A，如果有问题，提早暴露解决）</p><h3 id="特殊场景分析"><a href="#特殊场景分析" class="headerlink" title="特殊场景分析"></a>特殊场景分析</h3><p>场景1：计划功能A与功能B在某个时间点要同时上线，并且已经合并Feature—A、Feature—B到了Develop，将要检出Release分支进行测试，但此时收到通知，只上功能A不上功能B，此时Develop却包含了Feature—B的代码<br> 解决方案：回滚Develop到上一版本，重新合并Feature—A到Develop</p><h3 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h3><p>优点:</p><ul><li>功能分支独立，互不干扰，可以独立开发、测试</li><li>当Feature分支较长的时候，可以避免提前进Release</li><li>具备多个版本发布的能力</li></ul><p>缺点:</p><ul><li>模型相对复杂,维护了Master，Develop两个基准分支,当回归或者生产出现bug时，合并Master的同时合并回Develop，对开发人员要求较高,开发人员容易搞错导致Develop分支跟Master不一致</li><li>并行的feature分支太多时，代码冲突的可能性增加</li><li>当多个需求并行开发，如上特殊场景1情况，会造成分支污染</li></ul><h2 id="GitHub-Flow"><a href="#GitHub-Flow" class="headerlink" title="GitHub Flow"></a>GitHub Flow</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d31b628131f249c2b593b46f4d5f86c7~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h3 id="开发流程简述-1"><a href="#开发流程简述-1" class="headerlink" title="开发流程简述"></a>开发流程简述</h3><ol><li>默认存在master分支，与生产保持一致（GitHub Flow模型默认分支的更新与产品的发布是一致）</li><li>开发需求A，基于master检出分支A</li><li>A需求开发完成，提交合并到master的合并请求</li><li>评审合并代码，处理合并请求（未处理前还可以持续提交）</li><li>发布master 多个需求并行开发： 也与单个需求的开发一致，只是需要在master解决冲突，有可能多个需求分支合并到master后需要进行回归测试</li></ol><h3 id="特殊场景分析-1"><a href="#特殊场景分析-1" class="headerlink" title="特殊场景分析"></a>特殊场景分析</h3><p>场景2：当A分支开发完成后，合并到master，但此时由于各种原因未能发布到生产，此时会导致生产环境与master的代码不一致<br> 解决方案：从master创建一个product分支，只有在master代码发布成功后才合并product 场景3：在多个需求并行开发的场景下，需要并行去测试这些功能分支，假设我以功能分支作为测试分支提供给测试团队，那可能需要具备多套测试环境，假设以master作为测试分支，会受到其他合并到master分支的污染</p><p>解决方案：控制质量，提高master准入标准</p><h3 id="优缺点分析-1"><a href="#优缺点分析-1" class="headerlink" title="优缺点分析"></a>优缺点分析</h3><p>优点：操作简单，可以持续发布</p><p>缺点：对于测试来说不那么友好</p><h2 id="GitLab-Flow"><a href="#GitLab-Flow" class="headerlink" title="GitLab Flow"></a>GitLab Flow</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7691aeb52524ae282bb2e0eb1650d01~tplv-k3u1fbpfcp-watermark.image" alt="img"> 图1 ![img](data:image/svg+xml;utf8,<!--?xml version="1.0"?--><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="800" height="600"></svg>) 图2</p><h3 id="开发流程简述-2"><a href="#开发流程简述-2" class="headerlink" title="开发流程简述"></a>开发流程简述</h3><ol><li>GitLab Flow 开发分支是预发分支的”上游”，预发分支又是生产分支的”上游”。代码的变化，必须由”上游”向”下游”发展，如上面第一张图，最上游的MASTER作为开发分支，只有在开发分支完成，达到提交下一阶段的准入条件才能合并到PRE-PRODUCTION</li><li>项目持续发布，假设某一个迭代版本开始，从生产分支检出Dev分支，后续从上游DEV经过测试验收达到准入要求后向下游SIT、UAT、PRE-PRODUCTION合并，最后发布，合并到PRODUCTION</li><li>项目版本发布，如上图2，从master检出版本分支，并更新小版本后，持续维护这些版本分支。</li></ol><h3 id="特殊场景分析-2"><a href="#特殊场景分析-2" class="headerlink" title="特殊场景分析"></a>特殊场景分析</h3><p>场景4 :假设某功能分支流转到中间节点比如说UAT，但此时某些需求代码临时决定不上了，可能会污染UAT的代码</p><p>解决方案：回滚此代码，尽量保持中游分支的整洁</p><h3 id="优缺点分析-2"><a href="#优缺点分析-2" class="headerlink" title="优缺点分析"></a>优缺点分析</h3><p>优点：</p><ul><li>方案同时兼顾了“版本发布”、“持续发布”</li><li>能够对各环境版本有较好的区分，对测试团队支持较好 缺点：存在中游分支被污染的风险</li></ul><h2 id="基于GitLab-Flow的研发工作流程图解"><a href="#基于GitLab-Flow的研发工作流程图解" class="headerlink" title="基于GitLab Flow的研发工作流程图解"></a>基于GitLab Flow的研发工作流程图解</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a397b79a4c4f02bf878bdd5b65c652~tplv-k3u1fbpfcp-watermark.image" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Git分支管理策略方案，要根据团队特性尽量选择复杂度低的方案，例如：在并行需求较少，不需要基于版本发布的团队，可以选择GitHub FLow模型；对测试环境要求较强可以选择GitLab Flow模型；在大型团队，开发人员技术水平较高，控制非常严格的情况下，可以参考Git FLow。在方案确定的过程中，不要只是套用模型，而是在模型的基础上，根据团队特性制定更简单、高效、风险系数低的方案。 本文分析与总结了三种Git分支管理策略，希望对大家在选择与指定版本管理方案时有所启发。</p><p>作者：sleeper<br>链接：<a href="https://juejin.cn/post/6897071017919774728">https://juejin.cn/post/6897071017919774728</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> develop </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-stash</title>
      <link href="2020/11/22/git-stash/"/>
      <url>2020/11/22/git-stash/</url>
      
        <content type="html"><![CDATA[<h1 id="Git实用技巧：git-stash"><a href="#Git实用技巧：git-stash" class="headerlink" title="Git实用技巧：git stash"></a>Git实用技巧：git stash</h1><p>我们经常会遇到这样的情况：</p><blockquote><p>正在<strong>dev</strong>分支开发新功能，做到一半时有人过来反馈一个<strong>bug</strong>，让马上解决，但是新功能做到了一半你又不想提交，这时就可以使用<code>git stash</code>命令先把当前进度保存起来。然后切换到另一个分支去修改<strong>bug</strong>，修改完提交后，再切回<strong>dev</strong>分支，使用<code>git stash pop</code>来恢复之前的进度继续开发新功能。</p></blockquote><h3 id="1-stash当前修改"><a href="#1-stash当前修改" class="headerlink" title="1. stash当前修改"></a>1. stash当前修改</h3><ul><li><code>git stash</code>：<br>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行<code>git status</code>命令，就会发现当前是一个干净的工作区，没有任何改动。</li></ul><ol><li><code>stash</code>是本地的，不会上传到服务器上；</li><li>使用<code>git stash save 'message...'</code>可以添加一些注释。</li></ol><h3 id="2-查看现有stash"><a href="#2-查看现有stash" class="headerlink" title="2. 查看现有stash"></a>2. 查看现有<code>stash</code></h3><ul><li><code>git stash list</code>：<br>显示保存进度的列表。也就意味着，<code>git stash</code>命令可以多次执行。</li><li><code>git stash show</code> ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</li></ul><h3 id="3-重新应用缓存的stash"><a href="#3-重新应用缓存的stash" class="headerlink" title="3. 重新应用缓存的stash"></a>3. 重新应用缓存的<code>stash</code></h3><ul><li><code>git stash pop [–index] [stash_id]</code>：<br>恢复之前缓存的工作目录。</li></ul><ol><li><code>git stash pop</code>：恢复最新的进度到工作区。<code>git</code>默认会把工作区和暂存区的改动都恢复到工作区,同时删除该进度；</li><li><code>git stash pop stash@[stash_id]</code>：恢复指定的进度到工作区,如：<code>git stash pop stash@{1}</code>。<code>stash_id</code>是通过<code>git stash list</code>命令得到的；</li><li>通过<code>git stash pop</code>命令恢复进度后，会删除当前进度；</li><li><code>git stash apply stash@{1}</code>：恢复进度后，不会删除当前进度，默认使用最近的stash（即<code>stash@{0}</code>）。</li></ol><h3 id="4-移除stash"><a href="#4-移除stash" class="headerlink" title="4. 移除stash"></a>4. 移除<code>stash</code></h3><ul><li><code>git stash drop [stash_id]</code>：<br>删除一个存储的进度,如：<code>git stash drop stash@{0}</code></li></ul><ol><li>如果不指定<code>stash_id</code>：，则默认删除最新的存储进度；</li><li><code>git stash clear</code>：删除所有存储的进度。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx全能解析及性能调优</title>
      <link href="2020/11/18/nginx-quan-neng-jie-xi-ji-xing-neng-diao-you/"/>
      <url>2020/11/18/nginx-quan-neng-jie-xi-ji-xing-neng-diao-you/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nginx 是一个轻量级的、基于http的、高性能的反向代理的服务器和静态web服务器。</p></blockquote><h1 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h1><blockquote><p>不管是正向代理还是反向代理都是基于客户端来说的。</p></blockquote><ul><li>正向代理<ul><li>特点<ul><li>正向代理是对客户端的代理</li><li>正向代理是架设在客户端的主机</li><li>客户端在使用正向代理服务器时是要知道访问的目标服务的地址</li></ul></li><li>案例<ul><li>隐藏真正的访问者<ul><li>向服务端隐藏真正的访问者。对于服务端来说，真正的访问者时代理服务器。起到了隐藏客户端的作用。例如：实际生活中的短信轰炸，你根本不知道是谁给你发的短信；ddos攻击也是这个原理，使用很多‘肉鸡’机器来攻击我们的服务器，我们无法查找真正的攻击源。</li></ul></li><li>翻墙<ul><li>由于很多复杂的原因，导致服务器A不能直接访问服务器B，但是服务器C可以访问服务器B，而服务器A又可以访问服务器C；这时，服务器C作为服务起A的代理服务器对B进行访问。目前的翻墙软件就是使用这个原理。</li></ul></li><li>提速<ul><li>同上原理一样，服务器A访问服务器B速度过慢，而服务器C访问服务器B很快，服务器A访问服务器C很快。则使用代理服务器提高效率。</li></ul></li><li>缓存<ul><li>增加客户端缓存，减少对服务器的请求资源的压力。例如maven的nexus就是一个典型的客户端缓存例子。</li></ul></li><li>授权<ul><li>例如，在公司中，需要对员工电脑进行外网监控授权，则也是使用这种客户端正向代理服务器。</li></ul></li></ul></li></ul></li><li>反向代理<ul><li>特点<ul><li>反向代理是对服务端的代理</li><li>反向代理是架设在服务端的主机</li><li>客户端端访问的时候不知道真正服务主机的地址</li></ul></li><li>案例<ul><li>保护隐藏真正的服务<ul><li>客户端只能访问服务端代理服务器，而真正的服务端是不能直接访问的，保护了服务端。</li></ul></li><li>分布式路由<ul><li>根据客户端不同的请求，将请求路由到不同的服务端去。</li></ul></li><li>负载均衡<ul><li>服务端均摊客户端的请求，保证服务端的高可用。</li></ul></li><li>动静分离<ul><li>例如图片、静态页面、css、js等，都为静态资源，将其放到对应目录下，客户端加载静态资源时，就不会请求到服务端，而只会将动态资源的请求发送到服务端，减轻服务端的压力。</li></ul></li><li>数据缓存<ul><li>反向代理同正向代理一样具有数据缓存的功能，都是为了减少服务端的压力。</li></ul></li></ul></li></ul></li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>1、nginx的负载均衡策略有两种：内置策略和扩展策略</p></blockquote><blockquote><p>2、内置策略：轮询、权重轮询、IP hash、least_conn</p></blockquote><blockquote><p>3、扩展策略：自己想怎么实现就怎么实现</p></blockquote><table><thead><tr><th>轮询</th><th>默认方式</th></tr></thead><tbody><tr><td>权重（weight）</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>根据IP分配方式</td></tr><tr><td>least_conn</td><td>最少连接方式</td></tr><tr><td>fair（第三方）</td><td>响应时间方式</td></tr><tr><td>url_hash（第三方）</td><td>根据URL分配方式</td></tr></tbody></table><p><strong>轮询</strong></p><blockquote><p>轮询是upstream默认的负载均衡策略，每个请求会按时间顺序逐一分配到不同的服务器</p></blockquote><p>参数如下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>fail_timeout</td><td>与max_fail结合使用</td></tr><tr><td>max_fails</td><td>设置在fail_timeout设置的时间内的最大失败数</td></tr><tr><td>fail_time</td><td>服务器会被认为停机的时间长度，默认10s</td></tr><tr><td>backup</td><td>标记该服务器是备用服务器。当主服务器停止时，请求才会发到</td></tr><tr><td>down</td><td>标记服务器永久停机了</td></tr></tbody></table><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">#动态服务器组upstream dynamic_zuoyu {    server localhost:8080;  #tomcat 7.0    server localhost:8081;  #tomcat 8.0    server localhost:8082 backup;  #tomcat 8.5    server localhost:8083 max_fails=3 fail_timeout=20s;  #tomcat 9.0}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：此策略适合服务器配置相当，无状态且短平快的服务使用</p><p><strong>权重</strong></p><blockquote><p>权重的方式，是在轮询基础上制定轮询的几率；权重分配越高，需要处理的请求越多；此策略也可和ip_hash、least_conn结合使用。</p></blockquote><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">#动态服务器组upstream dynamic_zuoyu {    server localhost:8080 weight=2;  #tomcat 7.0    server localhost:8081;  #tomcat 8.0    server localhost:8082 backup;  #tomcat 8.5    server localhost:8083 max_fails=3 fail_timeout=20s;  #tomcat 9.0}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：此策略适合服务器硬件配置差异比较大时使用</p><p><strong>ip_hash</strong></p><blockquote><p>ip哈希的方式，基于客户端IP来分配，确保统一IP地址的客户端请求都到同一台服务器，保证session会话。可以解决session不能跨域的问题</p></blockquote><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">#动态服务器组upstream dynamic_zuoyu {    ip_hash;    #保证每个访客固定访问一个后端服务器    server localhost:8080 weight=2;  #tomcat 7.0    server localhost:8081;  #tomcat 8.0    server localhost:8082;  #tomcat 8.5    server localhost:8083 max_fails=3 fail_timeout=20s;  #tomcat 9.0}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：此策略适合服务器解决session不能跨域的问题时使用</p><p><strong>least_conn</strong></p><blockquote><p>最少连接方式，将请求转发给连接数较少的服务端。由于轮询的方式是平均将请求转发给各个服务器，使得负载大致相同。但是也存在其中某些请求的链路过长，占用时间长，导致某一些服务器的负载较高。所以最少连接的方式可以平衡轮询会出现的这种问题</p></blockquote><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">#动态服务器组 upstream dynamic_zuoyu {     least_conn;    #把请求转发给连接数较少的后端服务器     server localhost:8080   weight=2;  #tomcat 7.0     server localhost:8081;  #tomcat 8.0     server localhost:8082 backup;  #tomcat 8.5     server localhost:8083   max_fails=3 fail_timeout=20s;  #tomcat 9.0 }复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：此策略适合请求时间长短不一造成服务器负载的情况时使用</p><p><strong>fair（第三方，需要单独安装插件）</strong></p><blockquote><p>按照服务器的响应时间来分配请求，响应时间短的服务器优先分配（能者多劳）</p></blockquote><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">#动态服务器组upstream dynamic_zuoyu {    server localhost:8080;  #tomcat 7.0    server localhost:8081;  #tomcat 8.0    server localhost:8082;  #tomcat 8.5    server localhost:8083;  #tomcat 9.0    fair;    #实现响应时间短的优先分配}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>url_hash（第三方，需要单独安装插件）</strong></p><blockquote><p>按照url哈希来分配请求到服务器，使得相同的url每次到的服务器一致，这样也可以减轻对服务器的压力（配合缓存命中来使用）</p></blockquote><p>例子：</p><pre class="line-numbers language-shell"><code class="language-shell">#动态服务器组upstream dynamic_zuoyu {    hash $request_uri;    #实现每个url定向到同一个后端服务器    server localhost:8080;  #tomcat 7.0    server localhost:8081;  #tomcat 8.0    server localhost:8082;  #tomcat 8.5    server localhost:8083;  #tomcat 9.0}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：此策略适合同一个资源多次请求的情况时使用</p><h2 id="静态web服务器"><a href="#静态web服务器" class="headerlink" title="静态web服务器"></a>静态web服务器</h2><ul><li>前后端分离</li></ul><pre class="line-numbers language-shell"><code class="language-shell">location / {    root   /data/paibo_web_8081_css; #前端代码存放路径    index  index.html index.htm;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态资源（文件、图片等）</li></ul><pre class="line-numbers language-shell"><code class="language-shell">location /upfile/ {    root /home/audit_files/; #文件存放路径    index index.html;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nginx的下载与安装"><a href="#Nginx的下载与安装" class="headerlink" title="Nginx的下载与安装"></a>Nginx的下载与安装</h1><pre class="line-numbers language-shell"><code class="language-shell">#下载gcc编译器yum -y install gcc gcc-c++#下载PCREyum -y install pcre-devel openssl-devel#下载nginx，官方网站是 http://nginx.org ，自己找到需要的版本，右键复制下载链接wget http://nginx.org/download/nginx-1.19.2.tar.gz#解压tar -zxvf nginx-1.19.2.tar.gz#生成makefile。使用./configure --help查看各个模块的使用情况，使用--without-http_ssi_module的方式关闭不需要的模块。可以使用--with-http_perl_modules方式安装需要的模块cd nginx-1.19.2./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module #编译安装make && make install#进入到安装目录cd /usr/local/nginx/#将 /usr/local/nginx/sbin/nginx 软连接到 /usr/local/sbin 下，就可以在任意地方使用nginx命令ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/#修改配置文件vim /usr/local/nginx/conf/nginx.conf#测试nginx配置文件是否正常nginx -t#启动nginxnginx#关闭防火墙systemctl stop firewalldsystemctl disable firewalld#外部访问，nginx默认监听80端口192.168.198.98:80#重新载入配置文件nginx -s reload#重启nginxnginx -s reopen#停止nginxnginx -s stop复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nginx-Keepalived实现高可用"><a href="#Nginx-Keepalived实现高可用" class="headerlink" title="Nginx+Keepalived实现高可用"></a>Nginx+Keepalived实现高可用</h2><pre class="line-numbers language-shell"><code class="language-shell">#在两台服务器安装nginx，参考<Nginx的下载与安装>#我这里用的是下面两台服务器，为了区分，做了以下修改192.168.198.6 #编辑index.html，<h1>Welcome to nginx! 2</h1>192.168.198.98 #编辑index.html，<h1>Welcome to nginx! 1</h1>#两台服务器都需要执行以下操作#下载keepalived安装包cd /data/soft/wget https://www.keepalived.org/software/keepalived-2.1.0.tar.gz#解压安装包tar -zxvf keepalived-2.1.0.tar.gz#编译安装cd keepalived-2.1.0./configure --prefix=/usr/local/keepalivedmake && make install#keepalived启动脚本变量引用文件，默认文件路径是/etc/sysconfig/，也可以不做软链接，直接修改启动脚本中文件路径即可（安装目录下）cp /usr/local/keepalived/etc/sysconfig/keepalived  /etc/sysconfig/keepalived#将keepalived主程序加入到环境变量（安装目录下）cp /usr/local/keepalived/sbin/keepalived /usr/sbin/keepalived#keepalived启动脚本（源码目录下），放到/etc/init.d/目录下就可以使用service命令便捷调用cp /data/soft/keepalived-2.1.0/keepalived/etc/init.d/keepalived  /etc/init.d/keepalived#将配置文件放到默认路径下mkdir /etc/keepalivedcp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf#加为系统服务chkconfig –add keepalived#开机启动chkconfig keepalived on#查看开机启动的服务chkconfig –list#启动、关闭、重启service keepalived start|stop|restart######################### 至此，安装完成；以下就是在keepalived.conf做HA的配置 #########################vim /etc/keepalived/keepalived.conf##### master #####! Configuration File for keepalived# 全局定义块global_defs {   router_id redis-rocketMQ     #标志本节点的字符串，建议使用hostname}# keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级。如果脚本执行结果为 0，并且 weight 配置的值大于 0，则优先级相应>的增加。如果脚本执行结果非 0，并且 weight配置的值小于 0，则优先级相应的减少。其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。vrrp_script chk_nginx {    script "/etc/keepalived/nginx_check.sh"     #检测 nginx 状态的脚本路径    interval 2                                  #检测时间间隔    weight -20                                  #如果条件成立，权重-20}# 定义虚拟路由，VI_1 为虚拟路由的标示符，自己定义名称vrrp_instance VI_1 {    state MASTER                #主节点为MASTER，备用节点为BACKUP    interface eno16777736       #与本机网卡名称一致    virtual_router_id 51        #虚拟路由的id号，两个节点必须设置一样    mcast_src_ip 192.168.198.98    priority 100                #设置优先级，值范围 0~254，master要比backup高    nopreempt                   #优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题    advert_int 1                #组播信息发送间隔，节点必须设置一致    authentication {            #设置验证信息，节点必须设置一致        auth_type PASS        auth_pass 1111    }    #将 track_script 块加入 instance 配置块    track_script {        chk_nginx               #执行 Nginx 监控的服务    }    virtual_ipaddress {         #虚拟节点池，节点必须设置一样        192.168.198.111         #虚拟ip，可设置多个    }}##### backup #####! Configuration File for keepalivedglobal_defs {   router_id zk_alone}vrrp_script chk_nginx {    script "/etc/keepalived/nginx_check.sh"    interval 2    weight -20}vrrp_instance VI_1 {    state BACKUP    interface eno16777736    virtual_router_id 51    mcast_src_ip 192.168.198.6    priority 90    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    track_script {        chk_nginx    }    virtual_ipaddress {        192.168.198.111    }}#编写 Nginx 状态检测脚本#ps -C nginx | wc -l，查看当前有多少个nginx进程#逻辑：如果 nginx 停止运行，尝试启动，如果无法启动则杀死本机的 keepalived 进程， keepalied将虚拟 ip 绑定到 BACKUP 机器上vi /etc/keepalived/nginx_check.sh#!/bin/bashA=`ps -C nginx –no-header |wc -l`if [ $A -eq 0 ];then/usr/local/nginx/sbin/nginxsleep 2if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then    killall keepalivedfifi#赋权限chmod +x /etc/keepalived/nginx_check.sh#启动 两台Keepalivedservice keepalived start#访问虚拟IP192.168.198.111 # Welcome to nginx! 1######################### HA测试 ##########################由于我们写了一个自动启动nginx的脚本再keepalived中，故关闭时，先关闭keepalived，再关闭nginx192.168.198.98service keepalived stopnginx -s stop#再次访问192.168.198.111查看变化 Welcome to nginx! 2192.168.198.98service keepalived start #由于有启动nginx的脚本，故省去启动nginx的操作#再次访问192.168.198.111查看变化 Welcome to nginx! 1复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nginx高并发处理原理"><a href="#Nginx高并发处理原理" class="headerlink" title="Nginx高并发处理原理"></a>Nginx高并发处理原理</h1><blockquote><p>高并发一般是由多进程、多线程和异步机制来处理的，而正好nginx采用了这三种有效的处理高并发的方式。</p></blockquote><h2 id="Nginx的进程模型"><a href="#Nginx的进程模型" class="headerlink" title="Nginx的进程模型"></a>Nginx的进程模型</h2><p>​        进程模型采用Master/Worker 方式。当 nginx 启动的时候，会创建一个 Master 进程，Master进程会根据nginx.conf配置文件中相应的配置项来fork出多个worker子进程去处理请求（怎么处理也是根据配置文件中相应的配置文件）。</p><p>​        Master进程负责管理Worker进程的生命周期、处理网络事件、接收外界信号等。由于Master进程可以fork出多个Worker进程，所以说Nginx是多进程的。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce7c164ede604616a69595aebdbd98c9~tplv-k3u1fbpfcp-watermark.image" alt="Cheney爱逼逼"></p><h2 id="Nginx的线程模型"><a href="#Nginx的线程模型" class="headerlink" title="Nginx的线程模型"></a>Nginx的线程模型</h2><p>​        线程模型是指worker进程用于接收和处理客户端请求。每个worker进程可以同时处理多个用户请求。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06b81665d16149b083a8e4b6b73069b7~tplv-k3u1fbpfcp-watermark.image" alt="Cheney爱逼逼"></p><h2 id="Nginx的异步处理模型"><a href="#Nginx的异步处理模型" class="headerlink" title="Nginx的异步处理模型"></a>Nginx的异步处理模型</h2><p>​        异步处理模式是指nginx处理请求的时候是采用I/O多路复用技术（select | poll | epoll 模型），即多个 I/O 可以复用一个进程。当 worker 进程接收到客户端的请求后，会调用服务端对其请求进行处理，如果没有立即得到响应结果， worker 进程没有阻塞，而是去处理其他请求，知道有请求被服务端处理完成并返回响应结果。</p><p>​        这里的 worker 进程默认就是采用 epoll 多路复用机制来对服务端进行处理的。当服务端返回响应结果时，回调 epoll 多路复用器，epoll 告知 worker 进程，worker 会挂起当前正在处理的线程，去获取响应结果返回客户端，完成后再去执行被挂起的线程。整个过程中不会出现等待的情况，所以理论上Ngnix的一个进程就可以处理无限数量的连接，而且无需轮询。</p><p>​        注：worker 进程接收客户端请求不是采用的 epoll 模型，而是互斥锁机制；只有对服务端的请求和响应采用的是 epoll 模型。 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e470287e34dc46a5be745ec06b2ec54e~tplv-k3u1fbpfcp-watermark.image" alt="Cheney爱逼逼"></p><h1 id="Nginx的特点"><a href="#Nginx的特点" class="headerlink" title="Nginx的特点"></a>Nginx的特点</h1><h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><p>一个nginx的默认并发量为1024，是因为默认一个woker进程，每个进程处理量为1024，故1*1024；但是，在硬件条件满足的条件下，nginx可以支持5~10w的并发量。具体做法如下：</p><pre class="line-numbers language-shell"><code class="language-shell">####################### 操作系统配置 start ########################查看当前会话中所有的linux核心配置，而我们只需要关注open file这项ulimit -a#查看linux系统的“进程最大可打开文件数的设置”，默认时1024ulimit -n#修改“进程最大可打开文件数的设置”vim /etc/security/limit.conf#添加下面两行soft nofile 65535 #应用软件级别限制的最大可打开文件数的限制hard nofile 65535 #操作系统级别限制的最大可打开文件数的限制#文件保存后不会马上生效，所以还得更改当前会话级别的配置ulimit -n 65535####################### 操作系统配置 end ############################################## nginx配置 start ########################修改nginx配置文件（下面两行）vim /src/local/nginx/conf/nginx.confuser root root;worker_processes 4;worker_rlimit_nofile 65535; #这行，看这里看这里#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events {    use epoll;    worker_connections 65535; #这行，看这里看这里}#热部署重新加载配置文件nginx -s reload####################### nginx配置 end ############################################## 验证配置是否正确 start ########################查看当前nginx进程信息ps -ef | grep nginxroot     103734      1  0 13:27 ?        00:00:00 nginx: master process nginxnobody   103735 103734  0 13:27 ?        00:00:00 nginx: worker processroot     105129   3066  0 14:50 pts/0    00:00:00 grep --color=auto nginx#注意，也是看open files这项cat /proc/103735/limits####################### 验证配置是否正确 start ############################################## max client计算方式 start #######################max client = worker_processes * worker_connections或max client = worker_processes * worker_connections / 4#第一种很好理解，进程数*每个进程并发数#第二种为什么要除以4呢？是因为在nginx官网有这么一段话Since a browser opens 2 connections by default to a server and nginx uses the fds (file descriptors) from the same pool to connect to the upstream backend。#就是说，浏览器会建立两条链接到nginx，而nginx也会建立两条链接到服务端，故就是4####################### max client计算方式 end #######################复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="低消耗"><a href="#低消耗" class="headerlink" title="低消耗"></a>低消耗</h2><p>一万个非活跃性链接，消耗内存仅暂用2.5M，故对于一般的dos攻击不受影响，但是ddos还是有问题。</p><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>可以在7*24小时不间断服务提供，进行版本和配置平滑升级</p><pre class="line-numbers language-shell"><code class="language-shell">#命令nginx -s reload####################### 命令过程解析 start #######################1、当上面的命令一执行，如果发现配置文件已更改，会创建一个新的主进程2、当前所有的worker进程不会再接收新的请求并把当前正在处理的请求执行完就关闭3、master主进程会创建新的worker进程来接收并处理新的请求####################### 命令过程解析 end #######################复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>之所以实现高可用，是因为在nginx中，woker都一个一个的进程，就算其中某个进程挂掉了，也对其他的进程没得影响，而且其他的进程会接替出问题的进程。</p><h2 id="高扩展"><a href="#高扩展" class="headerlink" title="高扩展"></a>高扩展</h2><p>由于nginx是模块化集成，故在我们使用中，缺少什么模块我们就安装什么模块（模块一般分为C语言扩展模块和Lua脚本扩展模块）</p><pre class="line-numbers language-shell"><code class="language-shell">#下载模块git clone https://github.com/agentzh/echo-nginx-module#放入指定位置mv echo-nginx-module-master /usr/local/nginx/echo-nginx-module#就用这个命令生成新的makefile./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --add-module=/usr/local/nginx/echo-nginx-module#编译（这里只需要make，一定不要执行make install，不然会被覆盖）make#备份原文件cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak#替换nginx二进制文件cp /usr/local/nginx/objs/nginx /usr/local/nginx/sbin/nginx#重新建立软连接，检测配置文件并平滑启动ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginxnginx -tnginx -s reload复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nginx配置文件详解"><a href="#Nginx配置文件详解" class="headerlink" title="Nginx配置文件详解"></a>Nginx配置文件详解</h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4e952b5c973479a85295eda4fdf671d~tplv-k3u1fbpfcp-watermark.image" alt="Cheney爱逼逼"></p><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h3><p>配置影响nginx的全局指令。包括：</p><ul><li>配置运行nginx的服务器用户组</li><li>worker process数</li><li>nginx进程</li><li>pid存放路径</li><li>错误日志存放路径</li><li>配置文件的引入</li></ul><h3 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h3><p>配置影响nginx服务器或与用户的网络连接。包括：</p><ul><li>设置网络连接的序列化（惊群）</li><li>是否允许同时接收多个网络连接</li><li>选择事件驱动模型</li><li>设置最大连接数</li></ul><h3 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h3><p>可以嵌套多个server模块，配置代理、缓存、日志定义等和第三方模块的配置。包括：</p><ul><li>定义MIMI-Type</li><li>自定义服务日志格式</li><li>允许sendfile方式传输文件</li><li>连接超时时间</li><li>单连接请求数上限</li></ul><h3 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h3><p>配置虚拟主机相关参数。包括：</p><ul><li>配置网络监听</li><li>配置基于名称的虚拟主机</li><li>配置基于IP的虚拟主机</li></ul><h3 id="location块"><a href="#location块" class="headerlink" title="location块"></a>location块</h3><p>配置请求的路由，以及页面和其他静态资源的处理。包括：</p><ul><li>location配置</li><li>请求根目录配置更改</li><li>URL</li><li>网站默认首页配置</li></ul><h3 id="配置清单例析"><a href="#配置清单例析" class="headerlink" title="配置清单例析"></a>配置清单例析</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd998aa92614417f8b1b9db6302bc738~tplv-k3u1fbpfcp-watermark.image" alt="Cheney爱逼逼"></p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="配置文件一"><a href="#配置文件一" class="headerlink" title="配置文件一"></a>配置文件一</h3><pre class="line-numbers language-shell"><code class="language-shell">########### 每个指令必须有分号结束 ##################user administrator administrators;  #配置用户或者组，默认为nobody nobody。#worker_processes 2;  #允许生成的进程数，默认为1#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emergevents {    accept_mutex on;  #设置网路连接序列化，防止惊群现象发生，默认为on    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off    #use epoll;  #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport    worker_connections  1024;  #最大连接数，默认为512}http {    include       mime.types;  #文件扩展名与文件类型映射表    default_type  application/octet-stream;  #默认文件类型，默认为text/plain    #access_log off;  #取消服务日志        log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for';  #自定义格式    access_log log/access.log myFormat;  #combined为日志格式的默认值    sendfile on;  #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。    upstream mysvr {         server 127.0.0.1:7878;      server 192.168.10.121:3333 backup;  #热备    }    error_page 404 https://www.baidu.com;  #错误页    server {        keepalive_requests 120;  #单连接请求上限次数。        listen       4545;  #监听端口        server_name  127.0.0.1;  #监听地址               location  ~*^.+$ {  #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。           #root path;  #根目录           #index vv.txt;  #设置默认页           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表           deny 127.0.0.1;  #拒绝的ip           allow 172.18.5.54;  #允许的ip                   }     }}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件二"><a href="#配置文件二" class="headerlink" title="配置文件二"></a>配置文件二</h3><pre class="line-numbers language-shell"><code class="language-shell">#运行用户user nobody;#启动进程,通常设置成和cpu的数量相等worker_processes  1;#全局错误日志及PID文件#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;#工作模式及连接数上限events {    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,    #仅用于linux2.6以上内核,可以大大提高nginx的性能    use   epoll;     #单个后台worker process进程的最大并发链接数        worker_connections  1024;    # 并发总数是 worker_processes 和 worker_connections 的乘积    # 即 max_clients = worker_processes * worker_connections    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么    # 为什么上面反向代理要除以4，上面反向代理案例是有讲到    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000    # worker_connections 值的设置跟物理内存大小有关    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：    # $ cat /proc/sys/fs/file-max    # 输出 34336    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置    # 使得并发总数小于操作系统可以打开的最大文件数目    # 其实质也就是根据主机的物理CPU和内存进行配置    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。    # ulimit -SHn 65535}http {    #设定mime类型,类型由mime.type文件定义    include    mime.types;    default_type  application/octet-stream;    #设定日志格式    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  logs/access.log  main;    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，    #对于普通应用，必须设为 on,    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.    sendfile     on;    #tcp_nopush     on;    #连接超时时间    #keepalive_timeout  0;    keepalive_timeout  65;    tcp_nodelay     on;    #开启gzip压缩    gzip  on;    gzip_disable "MSIE [1-6].";    #设定请求缓冲    client_header_buffer_size    128k;    large_client_header_buffers  4 128k;    #设定虚拟主机配置    server {        #监听80端口        listen    80;        #定义使用 www.nginx.cn访问        server_name  www.nginx.cn;        #定义服务器的默认网站根目录位置        root html;        #设定本虚拟主机的访问日志        access_log  logs/nginx.access.log  main;        #默认请求        location / {            #定义首页索引文件的名称            index index.php index.html index.htm;           }        # 定义错误提示页面        error_page   500 502 503 504 /50x.html;        location = /50x.html {        }        #静态文件，nginx自己处理        location ~ ^/(images|javascript|js|css|flash|media|static)/ {            #过期30天，静态文件不怎么更新，过期可以设大一点，            #如果频繁更新，则可以设置得小一点。            expires 30d;        }        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.        location ~ .php$ {            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;            include fastcgi_params;        }        #禁止访问 .htxxx 文件        location ~ /.ht {            deny all;        }    }}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件三"><a href="#配置文件三" class="headerlink" title="配置文件三"></a>配置文件三</h3><pre class="line-numbers language-shell"><code class="language-shell">worker_processes 8; #nginx进程数，建议设置为等于CPU总核心数.error_log /var/log/nginx/error.log info; #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]pid /var/run/nginx.pid; #进程文件#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。worker_rlimit_nofile 65535;#工作模式与连接数上限events{　　#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。　　use epoll;　　#单个进程最大连接数（最大连接数=连接数*进程数）　　worker_connections 65535;}#设定http服务器http{    include mime.types; #文件扩展名与文件类型映射表    default_type application/octet-stream; #默认文件类型    #charset utf-8; #默认编码    server_names_hash_bucket_size 128; #服务器名字的hash表大小    client_header_buffer_size 32k; #上传文件大小限制    large_client_header_buffers 4 64k; #设定请求缓    client_max_body_size 8m; #设定请求缓    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。    tcp_nopush on; #防止网络阻塞    tcp_nodelay on; #防止网络阻塞    keepalive_timeout 120; #长连接超时时间，单位是秒    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。    fastcgi_connect_timeout 300;    fastcgi_send_timeout 300;    fastcgi_read_timeout 300;    fastcgi_buffer_size 64k;    fastcgi_buffers 4 64k;    fastcgi_busy_buffers_size 128k;    fastcgi_temp_file_write_size 128k;    #gzip模块设置    gzip on; #开启gzip压缩输出    gzip_min_length 1k; #最小压缩文件大小    gzip_buffers 4 16k; #压缩缓冲区    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）    gzip_comp_level 2; #压缩等级    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。    gzip_vary on;    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用    upstream blog.ha97.com {        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。        server 192.168.80.121:80 weight=3;        server 192.168.80.122:80 weight=2;        server 192.168.80.123:80 weight=3;    }    #虚拟主机的配置    server{        listen 80;　　　　#监听端口        server_name aa.cn www.aa.cn ; #server_name end  #域名可以有多个，用空格隔开        index index.html index.htm index.php;  # 设置访问主页        set $subdomain '';  # 绑定目录为二级域名 bbb.aa.com  根目录 /bbb  文件夹        if( $host ~* "(?:(\w+\.){0,})(\b(?!www\b)\w+)\.\b(?!(com|org|gov|net|cn)\b)\w+\.[a-zA-Z]+" ){             set $subdomain "/$2";         }        root /home/wwwroot/aa.cn/web$subdomain;# 访问域名跟目录          include rewrite/dedecms.conf; #rewrite end   #载入其他配置文件        location ~ .*.(php|php5)?$ {            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            include fastcgi.conf;        }        #图片缓存时间设置        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ {    　　　　expires 10d;        }        #JS和CSS缓存时间设置        location ~ .*.(js|css)?$ {    　　　　expiresexpires 1h;        }    }    #日志格式设定    log_format access '$remote_addr - $remote_user [$time_local] "$request" '    '$status $body_bytes_sent "$http_referer" '    '"$http_user_agent" $http_x_forwarded_for';    #定义本虚拟主机的访问日志    access_log /var/log/nginx/ha97access.log access;    #对 "/" 启用反向代理    location / {        proxy_pass http://127.0.0.1:88;        proxy_redirect off;        proxy_set_header X-Real-IP $remote_addr;        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #以下是一些反向代理的配置，可选。        proxy_set_header Host $host;        client_max_body_size 10m; #允许客户端请求的最大单文件字节数        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）        proxy_temp_file_write_size 64k;        #设定缓存文件夹大小，大于这个值，将从upstream服务器传    }    #设定查看Nginx状态的地址    location /NginxStatus {        stub_status on;        access_log on;        auth_basic "NginxStatus";        auth_basic_user_file conf/htpasswd;        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。    }    #本地动静分离反向代理配置    #所有jsp的页面均交由tomcat或resin处理    location ~ .(jsp|jspx|do)?$ {        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_pass http://127.0.0.1:8080;    }    #所有静态文件由nginx直接读取不经过tomcat或resin    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ {        expires 15d;    }    location ~ .*.(js|css)?${        expires 1h;    }}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件四"><a href="#配置文件四" class="headerlink" title="配置文件四"></a>配置文件四</h3><pre class="line-numbers language-shell"><code class="language-shell">######Nginx配置文件nginx.conf中文详解######定义Nginx运行的用户和用户组user www www;#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log /usr/local/nginx/logs/error.log info;#进程pid文件pid /usr/local/nginx/logs/nginx.pid;#指定进程可以打开的最大描述符：数目#工作模式与连接数上限#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。worker_rlimit_nofile 65535;events{ #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型 #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。 #补充说明： #与apache相类，nginx针对不同的操作系统，有不同的事件模型 #A）标准事件模型 #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll #B）高效事件模型 #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。 #Epoll：使用于Linux内核2.6版本及以后的系统。 #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。 #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。 use epoll; #单个进程最大连接数（最大连接数=连接数*进程数） #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。 worker_connections 65535; #keepalive超时时间。 keepalive_timeout 60; #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。 #分页大小可以用命令getconf PAGESIZE 取得。 #[root@web001 ~]# getconf PAGESIZE #4096 #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。 client_header_buffer_size 4k; #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。 open_file_cache max=65535 inactive=60s; #这个是指多长时间检查一次缓存的有效信息。 #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息. open_file_cache_valid 80s; #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。 #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态. open_file_cache_min_uses 1; #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误. open_file_cache_errors on;}#设定http服务器，利用它的反向代理功能提供负载均衡支持http{ #文件扩展名与文件类型映射表 include mime.types; #默认文件类型 default_type application/octet-stream; #默认编码 #charset utf-8; #服务器名字的hash表大小 #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小. server_names_hash_bucket_size 128; #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。 client_header_buffer_size 32k; #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。 large_client_header_buffers 4 64k; #设定通过nginx上传文件的大小 client_max_body_size 8m; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。 #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。 sendfile on; #开启目录列表访问，合适下载服务器，默认关闭。 autoindex on; #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用 tcp_nopush on; tcp_nodelay on; #长连接超时时间，单位是秒 keepalive_timeout 120; #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; #gzip模块设置 gzip on; #开启gzip压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0） gzip_comp_level 2; #压缩等级 gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。 gzip_vary on; #开启限制IP连接数的时候需要使用 #limit_zone crawler $binary_remote_addr 10m; #负载均衡配置 upstream piao.jd.com {  #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。  server 192.168.80.121:80 weight=3;  server 192.168.80.122:80 weight=2;  server 192.168.80.123:80 weight=3;  #nginx的upstream目前支持4种方式的分配  #1、轮询（默认）  #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。  #2、weight  #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。  #例如：  #upstream bakend {  # server 192.168.0.14 weight=10;  # server 192.168.0.15 weight=10;  #}  #2、ip_hash  #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。  #例如：  #upstream bakend {  # ip_hash;  # server 192.168.0.14:88;  # server 192.168.0.15:80;  #}  #3、fair（第三方）  #按后端服务器的响应时间来分配请求，响应时间短的优先分配。  #upstream backend {  # server server1;  # server server2;  # fair;  #}  #4、url_hash（第三方）  #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。  #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法  #upstream backend {  # server squid1:3128;  # server squid2:3128;  # hash $request_uri;  # hash_method crc32;  #}  #tips:  #upstream bakend{#定义负载均衡设备的Ip及设备状态}{  # ip_hash;  # server 127.0.0.1:9090 down;  # server 127.0.0.1:8080 weight=2;  # server 127.0.0.1:6060;  # server 127.0.0.1:7070 backup;  #}  #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;  #每个设备的状态设置为:  #1.down表示单前的server暂时不参与负载  #2.weight为weight越大，负载的权重就越大。  #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误  #4.fail_timeout:max_fails次失败后，暂停的时间。  #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。  #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。  #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug  #client_body_temp_path设置记录文件的目录 可以设置最多3层目录  #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡 } #虚拟主机的配置 server {  #监听端口  listen 80;  #域名可以有多个，用空格隔开  server_name www.jd.com jd.com;  index index.html index.htm index.php;  root /data/www/jd;  #对******进行负载均衡  location ~ .*.(php|php5)?$ {   fastcgi_pass 127.0.0.1:9000;   fastcgi_index index.php;   include fastcgi.conf;  }  #图片缓存时间设置  location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ {   expires 10d;  }  #JS和CSS缓存时间设置  location ~ .*.(js|css)?$ {   expires 1h;  }  #日志格式设定  #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；  #$remote_user：用来记录客户端用户名称；  #$time_local： 用来记录访问时间与时区；  #$request： 用来记录请求的url与http协议；  #$status： 用来记录请求状态；成功是200，  #$body_bytes_sent ：记录发送给客户端文件主体内容大小；  #$http_referer：用来记录从那个页面链接访问过来的；  #$http_user_agent：记录客户浏览器的相关信息；  #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。  log_format access '$remote_addr - $remote_user [$time_local] "$request" '  '$status $body_bytes_sent "$http_referer" '  '"$http_user_agent" $http_x_forwarded_for';  #定义本虚拟主机的访问日志  access_log /usr/local/nginx/logs/host.access.log main;  access_log /usr/local/nginx/logs/host.access.404.log log404;  #对 "/" 启用反向代理  location / {   proxy_pass http://127.0.0.1:88;   proxy_redirect off;   proxy_set_header X-Real-IP $remote_addr;   #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   #以下是一些反向代理的配置，可选。   proxy_set_header Host $host;   #允许客户端请求的最大单文件字节数   client_max_body_size 10m;   #缓冲区代理缓冲用户端请求的最大字节数，   #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。   #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误   client_body_buffer_size 128k;   #表示使nginx阻止HTTP应答代码为400或者更高的应答。   proxy_intercept_errors on;   #后端服务器连接的超时时间_发起握手等候响应超时时间   #nginx跟后端服务器连接超时时间(代理连接超时)   proxy_connect_timeout 90;   #后端服务器数据回传时间(代理发送超时)   #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据   proxy_send_timeout 90;   #连接成功后，后端服务器响应时间(代理接收超时)   #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）   proxy_read_timeout 90;   #设置代理服务器（nginx）保存用户头信息的缓冲区大小   #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小   proxy_buffer_size 4k;   #proxy_buffers缓冲区，网页平均在32k以下的设置   #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k   proxy_buffers 4 32k;   #高负荷下缓冲大小（proxy_buffers*2）   proxy_busy_buffers_size 64k;   #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长   #设定缓存文件夹大小，大于这个值，将从upstream服务器传   proxy_temp_file_write_size 64k;  }  #设定查看Nginx状态的地址  location /NginxStatus {   stub_status on;   access_log on;   auth_basic "NginxStatus";   auth_basic_user_file confpasswd;   #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。  }  #本地动静分离反向代理配置  #所有jsp的页面均交由tomcat或resin处理  location ~ .(jsp|jspx|do)?$ {   proxy_set_header Host $host;   proxy_set_header X-Real-IP $remote_addr;   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   proxy_pass http://127.0.0.1:8080;  }  #所有静态文件由nginx直接读取不经过tomcat或resin  location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|  pdf|xls|mp3|wma)$ {   expires 15d;   }  location ~ .*.(js|css)?$ {   expires 1h;  } }}######Nginx配置文件nginx.conf中文详解#####复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件五"><a href="#配置文件五" class="headerlink" title="配置文件五"></a>配置文件五</h3><pre class="line-numbers language-shell"><code class="language-shell">user                              nobody nobody;   ## 指定运行用户和组worker_processes                  4;               ## 指定worker数量，建议此处autoworker_rlimit_nofile              51200;           ## 最大打开文件描述符error_log                         logs/error.log  notice;pid                               /var/run/nginx.pid;events {  use                             epoll;            ## 使用epoll事件驱动模型  worker_connections              51200;            ## 一个worker能处理的最大并发}http {  server_tokens                   off;              ## 隐藏nginx版本  include                         mime.types;          proxy_redirect                off;                ## 关闭代理重定向  proxy_set_header              Host $host;              proxy_set_header              X-Real-IP $remote_addr;  proxy_set_header              X-Forwarded-For $proxy_add_x_forwarded_for;  client_max_body_size          20m;                ## 设置客户端请求body的最大允许大小  client_body_buffer_size       256k;                 ## 设置客户端请求body的缓冲区大小  proxy_connect_timeout         90;                     ## 与后端服务器连接的超时时长  proxy_send_timeout            90;                    ## 把请求发送给后端服务器的超时时长  proxy_read_timeout            90;                    ## 等待后端服务器发送响应报文的超时时长  proxy_buffer_size             128k;                 ## 从代理服务器接收的响应的第一部分缓冲区  proxy_buffers                 4 64k;            ## 从代理服务器读取响应的缓冲区number和size  proxy_busy_buffers_size       128k;            ## 限制size在响应尚未完全读取时可能忙于向客户端发送响应的缓冲区总数  proxy_temp_file_write_size    128k;            ## 该指令设置缓冲临时文件的最大值  default_type                    application/octet-stream;  charset                         utf-8;        ## 字符集  client_body_temp_path           /var/tmp/client_body_temp 1 2;  ## 请求body临时目录  proxy_temp_path                 /var/tmp/proxy_temp 1 2;    ## 代理服务器接受数据临时目录  fastcgi_temp_path               /var/tmp/fastcgi_temp 1 2; ## FastCGI服务器接收临时目录   uwsgi_temp_path                 /var/tmp/uwsgi_temp 1 2; ## uwsgi 服务器接收临时目录  scgi_temp_path                  /var/tmp/scgi_temp 1 2; ##scgi服务器接收临时目录  ignore_invalid_headers          on;        ## 开启控制忽略具有无效名称的标头字段  server_names_hash_max_size      256;        ## 服务器名称哈希表的最大值  server_names_hash_bucket_size   64;        ## 服务器名称哈希表存储bucket大小  client_header_buffer_size       8k;        ## 设置缓冲区以读取客户端请求标头  large_client_header_buffers     4 32k;    ## 设置缓冲区以读取客户端请求标头最大值number和size  connection_pool_size            256;        ## 允许精确调整每个连接的内存分配  request_pool_size               64k;        ## 允许精确调整每个请求的内存分配  output_buffers                  2 128k;    ## 设置用于从磁盘读取响应的缓冲区number和size  postpone_output                 1460;        ## 客户端数据的传输最小值，单位字节  client_header_timeout           1m;        ## 定义读取客户端请求标头的超时时长  client_body_timeout             3m;        ## 定义读取客户端请求主体的超时时长  send_timeout                    3m;        ## 设置将响应传输到客户端的超时时长  log_format main                 '$server_addr $remote_addr [$time_local] $msec+$connection '                                  '"$request" $status $connection $request_time $body_bytes_sent "$http_referer" '                                  '"$http_user_agent" "$http_x_forwarded_for"';  open_log_file_cache               max=1000 inactive=20s min_uses=1 valid=1m;  access_log                      logs/access.log      main;  log_not_found                   on;  sendfile                        on;              tcp_nodelay                     on;        ## 启用长连接马上响应，提高性能  tcp_nopush                      off;        ## 关闭套接字选项  reset_timedout_connection       on;        ## 启用重置超时连接  keepalive_timeout               10 5;        ## 第一个参数设置长连接超时时长，第二个浏览器识别为keep-alive:timeout=5  keepalive_requests              100;        ## 设置可通过一个保持活动连接提供的最大请求数  gzip                            on;        ## 开启压缩  gzip_http_version               1.1;        ## 启用压缩时协议最小版本  gzip_vary                       on;           gzip_proxied                    any;        ## 为所有代理请求启用压缩  gzip_min_length                 1024;        ## 设置将被gzip压缩的响应的最小长度  gzip_comp_level                 6;        ## 设置压缩等级  gzip_buffers                    16 8k;    ## 设置用于压缩响应的缓冲区number和size  gzip_proxied                    expired no-cache no-store private auth no_last_modified no_etag;  gzip_types                      text/plain application/x-javascript text/css application/xml application/json;  gzip_disable                    "MSIE [1-6]\.(?!.*SV1)";  upstream tomcat8080 {    ip_hash;    server                        172.16.100.103:8080 weight=1 max_fails=2;    server                        172.16.100.104:8080 weight=1 max_fails=2;    server                        172.16.100.105:8080 weight=1 max_fails=2;  }  server {    listen                        80;    server_name                   www.chan.com;    # config_apps_begin    root                          /data/webapps/htdocs;    access_log                    /var/logs/webapp.access.log     main;    error_log                     /var/logs/webapp.error.log      notice;    location / {      location ~* ^.*/favicon.ico$ {        root                      /data/webapps;        expires                   180d;        ## 缓存180天        break;      }      if ( !-f $request_filename ) {        proxy_pass                http://tomcat8080;        break;      }    }    error_page                    500 502 503 504  /50x.html;    location = /50x.html {      root                        html;    }  }  server {    listen                        8088;    server_name                   nginx_status;    location / {      access_log                  off;      deny                        all;      return                      503;    }    location /status {      stub_status                 on;      access_log                  off;      allow                       127.0.0.1;      allow                       172.16.100.71;      deny                        all;    }  }}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h1><h2 id="全局模块下的-调优"><a href="#全局模块下的-调优" class="headerlink" title="全局模块下的 调优"></a>全局模块下的 调优</h2><pre class="line-numbers language-shell"><code class="language-shell"># 设置进程数worker_processes 2;# 设置内核数量以及进程使用内核情况worker_cpu_affinity 01 10;# 可打开最大文件数worker_rlimit_nofile 65535;复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>worker_processes</strong></p><p>​    worker的进程数，该值一般设置为CPU内核数，或者内核的整倍数。例：当前有2个4核的CPU，那么将worker_processes的值可以设置为8或16，也阔以设置为4。这个不仅仅取决于CPU内核数，也与磁盘数量和负载均衡模式有关系，在不知道怎么做的时候可以设置为auto。</p></li><li><p><strong>worker_cpu_affinity</strong></p><p>​    将worker进程与cpu内核进行绑定，该配置是以多位二进制数进行设置。例：如上配置的情况，代表四个内核，0代表关闭，1代表开启。</p><table><thead><tr><th>内核数量</th><th>worker_processes</th><th>worker_cpu_affinity</th><th>解释</th></tr></thead><tbody><tr><td>2</td><td>2</td><td>0001 0010 0100 1000</td><td>每个进程各使用一个内核</td></tr><tr><td>2</td><td>4</td><td>01 10 01 10</td><td>4个进程交替使用两个内核</td></tr><tr><td>4</td><td>2</td><td>0101 1010</td><td>每个进程使用两个内核</td></tr><tr><td>4</td><td>4</td><td>0001 0010 0100 1000</td><td>每个进程各使用一个内核</td></tr></tbody></table></li><li><p><strong>worker_rlimit_nofile</strong></p><p>​    设置一个worker进程最大能打开的文件数。默认值与当前linux系统的设置的最大能打开的文件描述符一致。见上 《高并发》章节。</p></li></ol><h2 id="events模块下的调优"><a href="#events模块下的调优" class="headerlink" title="events模块下的调优"></a>events模块下的调优</h2><pre class="line-numbers language-shell"><code class="language-shell">events {    # 设置worker进程与客户端的连接方式（事件驱动模型）    use epoll;    # 设置worker进程最大的连接数，默认为512    worker_connections  1024;    # 设置网路连接序列化，防止惊群现象发生，默认为on    accept_mutex on;    accept_mutex_delay 500ms;    # 设置一个进程是否同时接受多个网络连接，默认为off    multi_accept on;}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>use</strong></p><p>​    设置worker进程与客户端连接的方式。而nginx支持多种连接方式，默认nginx会根据当前版本选择当前系统最高效的方式；而我们也阔以自行设定，该值可设置为select | poll | epoll | kqueue 等。这里涉及到 I/O 多路复用，在结尾来讲吧。</p></li><li><p><strong>worker_connections</strong></p><p>​    设置每个worker进程可以处理的最大并发数，该值不能超过 <strong>worker_rlimit_nofile</strong> 的值</p></li><li><p><strong>accept_mutex</strong></p><p>​    设置worker的接收互斥锁，当前所有空闲worker进程被放进了一个阻塞队列，等在新的连接来。如果开启：系统会创建一个互斥锁，而只有阻塞队列队首的worker进程可以获取锁，进而获得新的连接（预防惊群现象）；如果关闭：阻塞队列中所有的worker进程都会尝试获得新的连接，这就是惊群现象。</p></li><li><p><strong>multi_accept</strong></p><p>​    设置一个worker进程是否可以一次处理多个连接。如果开启：当多个新的连接来的时候，server会计算当前每个worker进程正在处理的连接数，选取一个最少的，将多个新的连接全交给他；如果关闭：当多个新的连接来的时候，server会根据负载均衡算法，依次将新的连接分配给当前处理连接最少的woker进程。</p></li></ol><h2 id="http模块下的调优"><a href="#http模块下的调优" class="headerlink" title="http模块下的调优"></a>http模块下的调优</h2><pre class="line-numbers language-shell"><code class="language-shell">http {    # 将当前目录(conf 目录)中的 mime.types 文件包含进来    include       mime.types;    # 对于无扩展名的文件，默认其为 application/octet-stream 类型，即 Nginx 会将其作为一个八进制流文件来处理    default_type  application/octet-stream;    # 设置请求与响应的字符编码    charset utf-8;    # 设置日志格式    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    # 开启访问日志，存放路径为logs/access.log，以log_format  main格式存放    access_log  logs/access.log  main;    log_format  postdata  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                                          ' $request_body'                      '"$http_user_agent" "$http_x_forwarded_for"';    # 设置为 on 则开启 Linux 系统的零拷贝机制，否则不启用零拷贝。当然，开启后是否起作用，要看所使用的系统版本。CentOS6 及其以上版本支持 sendfile 零拷贝。注意：如果图片显示不正常把这个改成off。    sendfile        on;    # 防止网络阻塞    tcp_nopush     on;    # 设置数据发送缓存    tcp_nodelay     on;    # 设置客户端与Nginx间所建立的长连接的生命超时时间，时间到达，则连接将自动关闭。单位秒    keepalive_timeout  65;    # 设置一个长连接发出最多的请求数    keepalive_requests  2000;    #开启gzip压缩    gzip  on;    # 设定请求缓冲    client_header_buffer_size    128k;    large_client_header_buffers  4 128k;    upstream api {        server 127.0.0.1:19090 weight=1;    }    # 虚拟主机    server {        listen       445 ssl;        server_name  localhost;        ssl_certificate /usr/local/nginx/conf/server.crt;        ssl_certificate_key /usr/local/nginx/conf/server.key;        location  ^~ /api/ {            #设置代理            proxy_set_header Host $host;            #proxy_set_header X-Real-IP $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header X-Forwarded-Proto $scheme;            proxy_pass http://api/;        }        location /upfile/ {            root  /home/audit_files;            add_header Access-Control-Allow-Origin *;        }        error_page  404              /404.html;        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }}复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>sendfile</strong></p><p>​    设置为 on 则开启 Linux 系统的零拷贝机制，否则不启用零拷贝。当然，开启后是否起作用，要看所使用的系统版本。CentOS6 及其以上版本支持 sendfile 零拷贝。注意：如果图片显示不正常把这个改成 off。</p></li><li><p><strong>tcp_nopush</strong></p><p>​    设置是否将nginx的响应头单独发送，如果开启：则会以单独的形式发送nginx的响应头，而真实的响应体数据会在单独以数据包的形式发送；如果关闭：则会将nginx的响应头和真实的响应体数据一起发送，每个响应都会包含。</p></li><li><p><strong>tcp_nodelay</strong></p><p>​    设置数据发送缓存，如果开启：不设置数据发送缓存，适合传输小数据；如果关闭：开启数据发送缓存，如果传输图片等大文件，建议设置为 off。</p></li><li><p><strong>keepalive_timeout</strong></p><p>​    设置连接活跃时间，如果超时则断开连接。若设置为0，则表示禁止keepalive连接。如果传输的数据量小，且系统运算量很小，则可以将该值设置小一些；反之。</p></li><li><p><strong>keepalive_requests</strong></p><p>​    设置一个长连接发送请求的最大数。如果当前系统并发量大，而如果 该值 设置很小，则会导致keepalive_timeout 时间还未到，但是keepalive_requests上限已经到了。故我们需要根据真实系统并发量和连接活跃时间来设置该值。</p></li><li><p><strong>client_body_timeout</strong></p><p>​    设置客户端获取响应的超时时间。如果超时了 ，则认为请求失败。可根据此值得设置来做接口的简单小压测，并且 可设置一个合理的值，保证请求响应的最优。</p></li></ol><h1 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a>I/O多路复用</h1><p>以单独的文章来说明</p><h1 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h1><p>以单独的文章来说明</p><p>链接：<a href="https://juejin.im/post/6895660634466156558">https://juejin.im/post/6895660634466156558</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 异步 API、循环、日期，用好提高生产力</title>
      <link href="2020/11/09/java8new-api/"/>
      <url>2020/11/09/java8new-api/</url>
      
        <content type="html"><![CDATA[<h4 id="异步API"><a href="#异步API" class="headerlink" title="异步API"></a>异步API</h4><p>对于多任务耗时的业务场景，一般我们会用到线程异步处理,在以前我们用 Thread 或者 Runnable 来实现异步，这是oracle官方做法，不过缺点很明显</p><ul><li>对于复杂业务场景需要配置线程池</li><li>代码繁杂，对于新手容易造成不必要的bug</li><li>如果涉及到线程锁或线程通讯就棘手了</li></ul><p>现在，java8为我们提供了<code>CompletableFuture</code>类，可以完全解决以上问题。</p><p>主要方法有:</p><ul><li><code>runAsync()</code> 异步无参返回</li><li>样例:</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    CompletableFuture async1 <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"none return Async"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用get()将等待异步逻辑处理完成</span>    async1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>supplyAsync()</code> 异步有参返回</li><li>样例:</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> async2 <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String result <span class="token operator">=</span> async2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// String result2 = async2.get(5L, TimeUnit.SECONDS);</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>allOf()</code> 多个异步处理(针对有参返回)</li><li>样例：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncThread3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> a <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> b <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"youth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> c <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture all <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String result <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>CompletableFuture<span class="token operator">:</span><span class="token operator">:</span>join<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>anyOf()</code> 多个异步随机处理(针对有参返回)</p></li><li><p>样例</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncThread4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> a <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token string">"none~"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> b <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"youth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> c <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>Object<span class="token operator">></span> any <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    String result <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>any<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环ForEach"><a href="#循环ForEach" class="headerlink" title="循环ForEach"></a>循环<code>ForEach</code></h4><p>java8 在原有<code>for</code>或<code>iterator</code>循环下又提供了 <code>forEach</code> 的方法，不过与for循环不同的是 <code>forEach</code> 循环是建立在<code>stream</code>之上的,而且比for或iterator方便的是，他可以循环<code>Map</code>对象，  如果您尝试配合filter处理就更赞了~</p><ul><li>forEach对List的循环样例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> lst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"O"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    lst<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>forEach对数组的循环 样例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">arrForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>forEach对int范围的循环 样例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">numericForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>forEach对Map的循环 样例:</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mapForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> mps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">23.44F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span>11L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    mps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新的时间类-LocalDate、LocalDateTime"><a href="#新的时间类-LocalDate、LocalDateTime" class="headerlink" title="新的时间类(LocalDate、LocalDateTime)"></a>新的时间类(<code>LocalDate</code>、<code>LocalDateTime</code>)</h4><p>java8 之前我们处理时间 大多会涉及到这几个类<code>Date、SimpleDateFormat、Calendar</code> ，这种处理方式复杂、存在线程隐患、国际化困难、日期加减等处理麻烦等等。</p><p>现在有了 <code>LocalDate</code>、<code>LocalDateTime</code>、<code>DateTimeFormatter</code>生活就变得简单了~详情可以关注公众号Java技术栈搜索阅读这系列的教程。</p><ul><li>格式化及区域定义</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**设置格式化模板**/</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DateTimeFormatter DATE_TIME_FORMATTER <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss.SSSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**设置日期时区常量**/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ZoneId CHINA_ZONE_ID <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Date格式化为DateTime</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**Date格式化为DateTime**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dateToDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LocalDateTime dateTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>CHINA_ZONE_ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LocalDate/LocalDateTime转Date</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**LocalDate/LocalDateTime转Date**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// LocalDate</span>  LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Date d1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>localDate<span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span>CHINA_ZONE_ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// LocalDateTime</span>  LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Date d2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>CHINA_ZONE_ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日期格式化</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**日期格式化**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DATE_TIME_FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日期加减</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**日期加减**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">plusDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LocalDateTime dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>CHINA_ZONE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//天</span>    dateTime<span class="token operator">=</span>dateTime<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//时</span>    dateTime<span class="token operator">=</span>dateTime<span class="token punctuation">.</span><span class="token function">plusHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分钟</span>    dateTime<span class="token operator">=</span>dateTime<span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DATE_TIME_FORMATTER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日期时间间隔</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**日期时间间隔**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">betweenDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// LocalDateTime</span>    LocalDateTime startDate <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LocalDateTime endDate <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Long withSecond <span class="token operator">=</span>  endDate<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>CHINA_ZONE_ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startDate<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>CHINA_ZONE_ID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>withSecond<span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// LocalDate</span>    LocalDate startDate2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LocalDate endDate2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Long withSecond2 <span class="token operator">=</span>  endDate2<span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startDate2<span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>withSecond2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一天and最后一天</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**第一天and最后一天**/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">theLastDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当月第一天</span>    LocalDateTime dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">07</span><span class="token punctuation">,</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dateTime <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">firstDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当月最后一天</span>    dateTime <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">lastDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当月的第几天</span>    dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfMonth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前周的第几天</span>    <span class="token keyword">int</span> dayOfWeek <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，本次分享就到这里，如有谬误恳请指正~</p>]]></content>
      
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8 快速实现List转map 、分组、过滤等操作</title>
      <link href="2020/11/09/java8stream/"/>
      <url>2020/11/09/java8stream/</url>
      
        <content type="html"><![CDATA[<p>利用java8新特性，可以用简洁高效的代码来实现一些数据处理。定义1个Apple对象：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal money<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Apple</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> BigDecimal money<span class="token punctuation">,</span> Integer num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加一些测试数据：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Apple<span class="token operator">></span> appleList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存放apple对象集合</span>Apple apple1 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"苹果1"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.25"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Apple apple12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"苹果2"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.35"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Apple apple2 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.89"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Apple apple3 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"荔枝"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"9.99"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple1<span class="token punctuation">)</span><span class="token punctuation">;</span>appleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple12<span class="token punctuation">)</span><span class="token punctuation">;</span>appleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4></li></ol><p>List里面的对象元素，以某个属性来分组，例如，以id分组，将id相同的放在一起：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//List 以ID分组 Map&lt;Integer,List&lt;Apple>></span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Apple<span class="token operator">>></span> groupBy <span class="token operator">=</span> appleList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Apple<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"groupBy:"</span><span class="token operator">+</span>groupBy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">[</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'苹果1'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">3.25</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'苹果2'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1.35</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token punctuation">[</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2.89</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">=</span><span class="token punctuation">[</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'荔枝'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">9.99</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h4 id="List转Map"><a href="#List转Map" class="headerlink" title="List转Map"></a>List转Map</h4></li></ol><p>id为key，apple对象为value，可以这么做：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * List -> Map * 需要注意的是： * toMap 如果集合对象有重复的key，会报错Duplicate key .... *  apple1,apple12的id都为1。 *  可以用 (k1,k2)->k1 来设置，如果有重复的key,则保留key1,舍弃key2 */</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Apple<span class="token operator">></span> appleMap <span class="token operator">=</span> appleList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Apple<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">,</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span>k2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>k1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">=</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'苹果1'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">3.25</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2.89</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">=</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'荔枝'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">9.99</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><h4 id="过滤Filter"><a href="#过滤Filter" class="headerlink" title="过滤Filter"></a>过滤Filter</h4></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//过滤出符合条件的数据</span>List<span class="token operator">&lt;</span>Apple<span class="token operator">></span> filterList <span class="token operator">=</span> appleList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"香蕉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filterList:"</span><span class="token operator">+</span>filterList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>Apple<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2.89</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4></li></ol><pre><code>//计算 总金额BigDecimal totalMoney = appleList.stream().map(Apple::getMoney).reduce(BigDecimal.ZERO, BigDecimal::add);System.err.println("totalMoney:"+totalMoney);  //totalMoney:17.48</code></pre><ol start="5"><li>查找流中最大 最小值</li></ol><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>Dish<span class="token operator">></span> maxDish <span class="token operator">=</span> Dish<span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Dish<span class="token operator">:</span><span class="token operator">:</span>getCalories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxDish<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>Optional<span class="token operator">&lt;</span>Dish<span class="token operator">></span> minDish <span class="token operator">=</span> Dish<span class="token punctuation">.</span>menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>      <span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Dish<span class="token operator">:</span><span class="token operator">:</span>getCalories<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minDish<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">.</span>comparingLong<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">.</span>collectingAndThen<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">.</span>toCollection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据id去重</span>     List<span class="token operator">&lt;</span>Person<span class="token operator">></span> unique <span class="token operator">=</span> appleList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>                <span class="token function">collectingAndThen</span><span class="token punctuation">(</span>                        <span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">comparingLong</span><span class="token punctuation">(</span>Apple<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ArrayList<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/05/hello-world/"/>
      <url>2020/11/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
